{"version":3,"file":"battleship/battleship.bundle-29d78e7a3df04223ac53.js","mappings":"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","sources":["webpack://webpack/webpack/bootstrap","webpack://webpack/webpack/runtime/define property getters","webpack://webpack/webpack/runtime/hasOwnProperty shorthand","webpack://webpack/webpack/runtime/make namespace object","webpack://webpack/./src/battleship/player.js","webpack://webpack/./src/battleship/ship.js","webpack://webpack/./src/battleship/gameboard.js","webpack://webpack/./src/battleship/ai.js","webpack://webpack/./src/battleship/dom-manipulation.js","webpack://webpack/./src/battleship/game.js","webpack://webpack/./src/battleship/battleship.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Functions for creation and management of player objects\n\nfunction createPlayer (type = 'player') {\n\n    if (!(type === 'ai')) type = 'player';\n\n    let board;\n\n    function attack (board, x, y) {\n        return board.receiveAttack(x, y);\n    }\n\n    function attackRandom(board) {\n        let attack;\n        while (!attack) {\n            let grid = randomCoords(board);\n            attack = board.receiveAttack(grid.x, grid.y);\n        }\n    }\n\n    if (type === 'player') {\n        return {\n            isTurn: false,\n            type,\n            board,\n            attack,\n            name: 'Player',\n            selected: {\n                x: 0,\n                y: 0\n            },\n            placing: {\n                ship: false,\n                orientation: 'horizontal'\n\n            },\n            show: 'myShips'\n        }  \n    } else if (type === 'ai') {\n        return {\n            isTurn: false,\n            type,\n            board,  \n            attackRandom,\n            name: 'Ai'  \n        }\n    }\n}\n\nfunction randomOrientation () {\n    let integer = Math.floor(Math.random() * 10);\n    if (integer > 5) {\n        return 'horizontal';\n    } else {\n        return 'vertical';\n    }\n}\n\nfunction randomCoords (board) {\n    let length = board.board.length;\n    let x = Math.floor(Math.random() * length);\n    let y = Math.floor(Math.random() * length);\n\n    return {\n        x,\n        y\n    }\n}\n\nexport {\n    createPlayer\n}","// Functions for creation and management of ship objects\n\nfunction createShip (length, name) {\n\n    let totalHits = 0;\n\n    function hit () {\n        this.totalHits++;\n    }\n    \n    function isSunk () {\n        if (this.totalHits >= this.length) {\n            return true;\n        }\n        return false;\n    }\n\n    return {\n        length,\n        totalHits,\n        hit,\n        isSunk,\n        name\n    }\n}\n\nexport {\n    createShip,\n}","// Function for creation and management of gameboard objects\n\nimport * as Ship from './ship.js';\n\nfunction createBoard () {\n\n    let board = populateBoard();\n\n    let shipsList = [\n        {\n            name: 'Carrier',\n            length: 5\n        },\n        {\n            name: 'Battleship',\n            length: 4\n        },\n        {\n            name: 'Destroyer',\n            length: 3\n        },\n        {\n            name: 'Submarine',\n            length: 3\n        },\n        {\n            name: 'Patrol Boat',\n            length: 2\n        }\n    ];\n\n    function populateBoard () {\n        let board = [];\n\n        for (let i = 0; i < 10; i ++) {\n            let row = [];\n            for (let h = 0; h < 10; h++) {\n                row.push(createNode());\n            }\n            board.push(row);\n        }\n        return board;\n    }\n\n    function createNode () {\n        return {\n            ship: false,\n            attacked: false,\n        };\n    }\n\n    return {\n        board,\n        receiveAttack,\n        placeShip,\n        shipsSunk,\n        ships: [],\n        shipsList\n    };\n}\n\nfunction placeShip (x, y, length, orientation = 'horizontal', name) {\n    // Check if the current node is valid\n    if (checkIfValid(x, y, this.board)){\n        // Check if orientation has been specified\n        if (orientation === 'horizontal' || orientation === 'vertical') {\n            // Check that there is room for the placement\n            if (checkIfRoom(x, y, length, orientation, this.board)) {\n                commitPlacement(x, y, length, orientation, this.board, this, name);\n                return 'valid';\n            }\n        } else {\n            throw new Error('Orientation not specified');\n        }   \n    }\n\n    return \"invalid\"\n\n    function commitPlacement (x, y, length, orientation, board, gameboardObj, name) {\n\n        const newShip = Ship.createShip(length, name);\n        gameboardObj.ships.push(newShip);        \n\n        for (let i = 0; i < length; i++) {\n            board[y][x].ship = newShip;\n            if (orientation === 'horizontal') x++;\n            if (orientation === 'vertical') y++;\n        }\n    }\n\n    function checkIfRoom (x, y, length, orientation, board) {\n        for (let i = 0; i < length; i ++) {\n            if (!(checkIfValid(x, y, board))) {\n                return false;\n            };\n\n            if (orientation === 'horizontal') {\n                x++;\n            } else {\n                y++;\n            }\n        }\n        return true;\n    }\n\n    function checkIfValid (x, y, board) {\n        if (y < 0 || y > 9) return false;\n        if (x < 0 || x > 9 ) return false;\n        if (board[y][x].ship || board[y][x].attacked) return false;\n        return true;\n    }\n\n}\n\nfunction receiveAttack (x, y) {\n    let node = this.board[y][x];\n\n    if (!isInBounds(x, y) || node.attacked) return false;\n\n    node.attacked = true;\n\n    if (node.ship){\n        node.ship.totalHits++;\n        return 'hit';\n    } else {\n        return 'miss';\n    }\n}\n\nfunction shipsSunk () {\n    let sunkShipCount = 0;\n    let ships = this.ships;\n    ships.forEach((ship, index) => {\n        if (ship.isSunk()) sunkShipCount++;\n    });\n    if (ships.length === sunkShipCount && ships.length > 0) return 'ALL';\n    return sunkShipCount;\n\n}\n\nfunction isInBounds (x, y) {\n    if (x < 0 || x > 9 || y < 0 || y > 9) return false;\n    return true;\n}\n\nexport {\n    createBoard\n}","// Functions relating to ai and randomization\n\nfunction populate (board) {\n    board.shipsList.forEach((ship, index) => {\n        let keepGoing = 'invalid';\n        while (keepGoing === 'invalid') {\n            let orientation = randomOrientation();\n            let grid = randomCoords(board);\n            keepGoing = board.placeShip(grid.x, grid.y, ship.length, orientation, ship.name);\n        }\n    });\n\n}\n\nfunction randomOrientation () {\n    let integer = Math.floor(Math.random() * 10);\n    if (integer > 5) {\n        return 'horizontal';\n    } else {\n        return 'vertical';\n    }\n}\n\nfunction randomCoords (board) {\n    let length = board.board.length;\n    let x = Math.floor(Math.random() * length);\n    let y = Math.floor(Math.random() * length);\n\n    return {\n        x,\n        y\n    }\n}\n\nexport {\n    populate,\n}","// Dom methods and rendering\n\nfunction initialize () {\n    // Render guides for each board\n    const boards = document.querySelectorAll('.board');\n    const letters = [\n        'A', 'B', 'C', 'D', 'E', 'F',\n        'G', 'H', 'I', 'J'\n    ];\n\n    boards.forEach((board) => {\n        addEmpty(board);\n        renderLetters(board);\n        renderNumbers(board);\n        renderNodeSquares(board);\n    });\n\n    function addEmpty (board) {\n        // Create empty square and give it a class\n        let newDiv = document.createElement('div');\n        newDiv.classList.add('empty');\n        newDiv.classList.add('gridSquare');\n        \n        // Placement\n        newDiv.style.backgroundColor = 'black';\n        newDiv.style.gridArea = '0/0/1/1';\n        \n        // Add to DOM\n        board.appendChild(newDiv);\n    }\n\n    function renderLetters (board) {\n\n        // Generate ten divs\n        for (let i = 0; i < 10; i++) {\n            let newDiv = document.createElement('div');\n\n            // Assign a letter to each of them in order\n            newDiv.innerText = letters[i];\n            \n            // Give them a class\n            newDiv.classList.add('letter');\n            newDiv.classList.add('gridSquare');\n\n\n            // Placement\n            newDiv.style.gridArea = '0/' + i + '/1/' + (i + 1);\n\n            // Add to DOM\n            board.appendChild(newDiv);\n        }\n    }\n\n    function renderNumbers (board) {\n        // Generate ten divs\n        for (let i = 0; i < 10; i++) {\n            let newDiv = document.createElement('div');\n\n            // Assign a number to each in order\n            newDiv.innerText = i + 1;\n\n            // Give them a class\n            newDiv.classList.add('number');\n            newDiv.classList.add('gridSquare');\n\n            // Placement\n            newDiv.style.gridColumn = '0 / 1';\n            newDiv.style.gridRow = (i + 2) + '/' + (i + 3);\n\n            // Add to DOM\n            board.appendChild(newDiv);\n        }\n    }\n\n    function renderNodeSquares(board) {\n        // create 100 divs, separated by ten to place them in rows\n        for (let i = 0; i < 10; i++) {\n            for (let j = 0; j < 10; j++) {\n                let newDiv = document.createElement('div');\n\n                // Give it a class\n                newDiv.className = 'gridSquare gameSquare';\n\n                // Attach metadata about positoning\n                newDiv.meta = {\n                    x: j,\n                    y: i\n                }\n\n                // Placement\n                newDiv.style.gridColumn = (newDiv.meta.x + 2) + ' / ' +  (newDiv.meta.x + 3);\n                newDiv.style.gridRow = (newDiv.meta.y + 2) + ' / ' +  (newDiv.meta.y + 3);\n\n                board.appendChild(newDiv);\n            }\n        }\n    }\n}\n\nfunction updateBoards (game) {\n\n    let boards = game.boards;\n    let players = game.players;\n    let playerWhoseTurn = game.findWhoseTurn(game);\n\n    // Disable arrows and commit while in fleet view\n    const arrows = document.querySelectorAll('.arrow');\n    arrows.forEach((arrow, index) => {\n        if (playerWhoseTurn.show === 'myShips' && game.phase != 'placement') {\n            arrow.disabled = true;\n        } else {\n            arrow.disabled = false;\n        }\n    });\n\n    // Hide the rotate button after placement phase\n    const rotateButton = document.querySelector('#rotate');\n    if (game.phase != 'placement') rotateButton.style.display = 'none';\n\n    // Hide the radar button during placement phase\n    const targetingButton = document.querySelector('#targeting');\n    if (game.phase === 'placement') {\n        targetingButton.style.display = 'none';\n    } else {\n        targetingButton.style.display = 'grid';\n    }\n\n    // If it's the ai's turn, do not render\n    if (playerWhoseTurn.type === 'ai') return;\n\n    // Get DOM board nameplate\n    const boardNameplate = document.querySelector('#boardIdent');\n    // Update board nameplate\n    if (playerWhoseTurn.show === 'myShips') {\n        boardNameplate.innerText = 'My Fleet';\n    } else {\n        boardNameplate.innerText = 'Radar';\n    }\n    \n\n    // Get DOM player nameplate\n    const playerNameplate = document.querySelector('#playerIdent');\n    // Update player nameplate\n    playerNameplate.innerText = playerWhoseTurn.name;\n\n    // Get player's own boards from the DOM\n    const ownRenderedBoards = document.querySelectorAll('.board.own');\n\n    // Iterate through 'own' boards\n    ownRenderedBoards.forEach((renderedBoard, index) => {\n        // Assign an owner to each board\n        renderedBoard.player = players[index];\n\n        // Hide the board if it's an ai\n        if (renderedBoard.player.type === 'ai' && game.players[1 - index].type === 'player') {\n            renderedBoard.style.display = 'none';\n        }\n\n        // Get nodelist of all squares on the boards\n        const nodeSquares = renderedBoard.querySelectorAll('.gameSquare');\n\n        // Iterate though them\n        nodeSquares.forEach((square) => {\n            // Assign node to the square's meta\n            square.meta.square = findNode(square.meta.x, square.meta.y, boards[index]);\n\n            // Render meta\n            renderOwnMeta(game, renderedBoard, square);     \n        });\n\n        // Decide whether or not to display the board\n        showOrHideBoard(renderedBoard);\n    });\n\n    // Get players' 'their' boards from the Dom\n    const theirRenderedBoards = document.querySelectorAll('.board.theirs');\n\n    // Iterate through boards\n    theirRenderedBoards.forEach((renderedBoard, index) => {\n        // Assign an owner to each board\n        renderedBoard.player = players[index];\n\n        // Hide the board if it's an ai\n        if (renderedBoard.player.type === 'ai' && game.players[1 - index].type === 'player') {\n            renderedBoard.style.display = 'none';\n        }\n\n        // Get a nodelist of all the squares on the board\n        const nodeSquares = renderedBoard.querySelectorAll('.gameSquare');\n\n        // Iterate through them\n        nodeSquares.forEach((square) => {\n\n            // Assign a node to the square's meta\n            square.meta.square = findNode(square.meta.x, square.meta.y, boards[1 - index]);\n\n            // Render meta\n            renderTheirMeta(game, renderedBoard, square);\n        });\n\n        // Decide whether or not to display the board\n        showOrHideBoard(renderedBoard);\n    });\n\n}\n\nfunction renderTheirMeta (game, renderedBoard, square) {\n    const ship = square.meta.square.ship;\n\n    if (ship && square.meta.square.attacked) {\n        square.style.backgroundColor = 'red';\n        square.innerText = ship.name.slice(0, 1); \n        square.style.color = 'white';\n    }\n\n    if (!ship && square.meta.square.attacked) {\n        square.style.backgroundColor = 'blue';\n    }\n\n    if (renderedBoard.player.isTurn && renderedBoard.player.selected) {\n        if (game.phase === 'game' && square.meta.x === renderedBoard.player.selected.x && square.meta.y === renderedBoard.player.selected.y) {\n            square.classList.add('selected');\n        } else {\n            square.classList.remove('selected');\n        }\n    }\n}\n\nfunction renderOwnMeta (game, renderedBoard, square) {\n    const ship = square.meta.square.ship;\n\n    if (square.meta.preview) {\n        square.classList.add('preview');\n    } else {\n        square.classList.remove('preview');\n    }\n    \n    if (ship) {\n        square.innerText = ship.name.slice(0, 1); \n        square.style.backgroundColor = 'gray';\n        square.style.color = 'white';\n    } \n\n    if (ship && square.meta.square.attacked) {\n        square.style.backgroundColor = 'red';\n    }\n\n    if (!ship && square.meta.square.attacked) {\n        square.style.backgroundColor = 'blue';\n    }\n\n    if (renderedBoard.player.isTurn && renderedBoard.player.selected) {\n        if (game.phase === 'placement' && square.meta.x === renderedBoard.player.selected.x && square.meta.y === renderedBoard.player.selected.y) {\n            square.classList.add('selected');\n        } else {\n            square.classList.remove('selected');\n        }\n    } else {\n        square.classList.remove('selected');\n    }\n}\n\nfunction findNode (x, y, board) {\n    // Search for the node\n    let found = false;\n    board.board.forEach((row, yIndex) => {\n        row.forEach((square, xIndex) => {\n            if (xIndex === +x && yIndex === +y) found = square;\n        });\n    });\n\n    // If it's found then return it\n    if (found) return found;\n\n    // If it isn't then throw an error\n    throw new Error('Node Square mismatch');\n    \n}\n\nfunction showOrHideBoard (board) {\n    \n    showIfTurn(board);\n    if (board.player.show === 'myShips') showMyShips(board);\n    if (board.player.show === 'targeting') showTargeting(board);\n\n    function showMyShips (board) {\n        if (!board.classList.contains('own')) {\n            board.style.display = 'none';\n        } \n    }\n    \n    function showTargeting (board) {\n        if (!board.classList.contains('theirs')) {\n            board.style.display = 'none';\n        } \n    }\n    \n    function showIfTurn (board) {\n        if (board.player.isTurn) {\n            board.style.display = 'grid';\n        } else {\n            board.style.display = 'none';\n        }\n    }\n}\n\nfunction getPreview (game) {\n    // Calculate which squares should be used for the preview\n\n    // Player whose turn it is\n    let player = game.findWhoseTurn(game);\n\n    // Get own rendered board for the player\n    const ownRenderedBoards = document.querySelectorAll('.board.own');\n\n    let ownRenderedBoard;\n    ownRenderedBoards.forEach((renderedBoard) => {\n        if (renderedBoard.player === player) {\n            ownRenderedBoard = renderedBoard;\n        }\n    });\n\n    // Get preview squares and assign\n    for (let i = 1; i < player.placing.ship.length; i++) {\n        if (player.placing.orientation === 'horizontal') {\n            let square = findRenderedSquare(player.selected.x + i, player.selected.y, ownRenderedBoard);\n            if (square) square.classList.add('preview');\n            \n        } else if (player.placing.orientation === 'vertical') {\n            let square = findRenderedSquare(player.selected.x, player.selected.y + i, ownRenderedBoard);\n            if (square) square.classList.add('preview');\n        }\n    }\n\n    function findRenderedSquare (x, y, renderedBoard) {\n        const squares = renderedBoard.querySelectorAll('.gameSquare');\n        let result;\n        squares.forEach((square) => {\n            if (square.meta.x === x && square.meta.y === y) {\n                result = square;\n            }\n        });\n        if (result) return result;\n        return false;\n    }\n}\n\nasync function landingScreen () {\n    return new Promise((resolve) => {\n        // Add landing screen to the DOM\n        addLandingModal();\n        // Wait for three seconds and then clear\n        setTimeout(() => {\n            resolve();\n        }, 4000);\n    });\n\n    function addLandingModal (message = 'BATTLEBOATS') {\n        // Create new modal\n        let newModal = document.createElement('div');\n        // Give it the modal class\n        newModal.classList.add('modal');\n        // Add content\n        let newP = document.createElement('p');\n        newP.innerText = message;\n        newP.style.color = 'white';\n        newP.style.fontSize = '12vw';\n        newModal.appendChild(newP);\n        // Add to the DOM\n        const body = document.querySelector('body');\n        body.appendChild(newModal);\n    }\n}\n\nasync function splashscreen (game, mode, message = '') {\n    \n    return new Promise((resolve) => {\n        console.log('splashing');\n        \n        // Overlay the screen with a modal if there isn't an existing one\n        const modal = document.querySelector('.modal');\n        if (!modal) {\n            addModal(game, message);\n        } else {\n            clearModal();\n            setupPlayerTransition(modal, game, message);\n        }\n        // Get the ready button\n        const readyButton = document.querySelector('.modal .readyButton');\n        // Add eventlistener\n        readyButton.addEventListener('click', handleReadyClick);\n        \n        function handleReadyClick () {\n            readyButton.removeEventListener('click', handleReadyClick);\n            if (game.findWhoseTurn().type === 'player') {\n                removeModal(game);\n            }\n            resolve();\n        }\n    });\n\n    function addModal (game, message) {\n        // Create new modal\n        let newModal = document.createElement('div');\n\n        // Set css styling/class\n        newModal.classList.add('modal');\n\n        // Add to the dom\n        document.querySelector('body').appendChild(newModal);\n        \n        // Add content\n        setupPlayerTransition(newModal, game, message);\n    }\n    \n    function setupPlayerTransition (modal, game, message) {\n        \n        // Add info paragraph\n        let infoP = document.createElement('p');\n\n        // Add inner text\n        infoP.innerText = game.findWhoseTurn().name + ' is next' + '\\n' + message;\n\n        // set css styling/class\n        infoP.classList.add('modalMessage');\n        \n        // Add to modal\n        modal.appendChild(infoP);\n\n\n        // make a ready button\n        let readyButton = document.createElement('button');\n        \n        // Add inner text\n        readyButton.innerText = 'Ready!';\n        \n        // Set css styling/class\n        readyButton.classList.add('readyButton');\n        readyButton.style.cssText = \"font-size: 3vh\";\n        \n        // Add to modal\n        modal.appendChild(readyButton); \n    }\n}\n\nfunction removeModal () {\n    // Get the modal\n    const modal = document.querySelector('.modal');\n    // Remove it\n    modal.remove();\n}\n\nfunction clearModal () {\n    const modal = document.querySelector('.modal');\n    console.log(modal);\n    modal.innerHTML = '';\n}\n\nexport {\n    initialize,\n    updateBoards,\n    getPreview,\n    splashscreen,\n    landingScreen,\n    // playerChoiceScreen\n}","import * as Player from './player.js';\nimport * as Gameboard from './gameboard.js';\nimport * as Ai from './ai.js';\nimport * as Dom from './dom-manipulation.js';\n\n\nfunction initialize (player1 = 'player', player2 = 'player') {\n\n    // Initialize game boards\n    const boards = [];\n\n    for (let i = 0; i < 2; i++) {\n        boards[i] = Gameboard.createBoard();\n    }\n\n    // Initialize players\n    const playerTypes = [player1, player2];\n    const players = [];\n\n    playerTypes.forEach((player, index) => {\n        let newPlayer = Player.createPlayer(player);\n        newPlayer.board = boards[index];\n        players.push(newPlayer);\n    });\n\n    // Main game loop\n    async function mainLoop () {\n        // SETUP\n        \n        // Give player 1 the starting turn\n        this.players[0].isTurn = true;\n\n        // Initialize arrow keys\n        setupListeners(this);\n\n        // Name players\n        this.players.forEach((player, index) => {\n            player.name = player.name + ' #' + (index + 1);\n        });\n        \n        \n        // Populate game boards\n        console.log('Placement Phase');\n        // Determine player type and appropriate placement method\n        for (let i = 0; i < this.boards.length; i++) {\n            // Draw boards\n            Dom.updateBoards(this);\n            await Dom.splashscreen(this, 'transition', 'Placement Phase');\n\n            if (this.players[i].type === 'ai') {\n                this.Ai.populate(this.boards[i]);\n            } else if (this.players[i].type === 'player') {\n                await playerPlaceLoop(this, this.boards[i], i);\n                players[i].show = 'myShips';\n            }\n            await sleep();\n            toggleTurns(this);\n        }\n        \n        // Draw boards\n        Dom.updateBoards(this);\n        \n        // Game loop\n        console.log('Game Phase');\n        this.phase = 'game';\n        playRound(this, 0);\n\n        async function playerPlaceLoop (game, board, playerIndex) {\n\n            // Iterate through ships list, continuing once placement is valid\n            for (let i = 0; i < board.shipsList.length; i++) {\n                let player = game.players[playerIndex];\n                player.placing.ship = board.shipsList[i];\n                player.placing.orientation = 'horizontal';\n\n                // Initialize preview\n                Dom.getPreview(game);\n\n                let result = 'invalid';\n\n                while (result != 'valid') {\n\n                    result = await waitForInput(board, i, player.placing.orientation);\n\n                    if (result === 'horizontal' || result === 'vertical') {\n                        player.placing.orientation = result;\n                    }\n                    Dom.updateBoards(game);\n                    Dom.getPreview(game);\n                }\n            }\n\n            // Return after finished\n            return new Promise((resolve) => {\n                resolve();\n            });\n\n            function waitForInput (board, i, orientation) {\n                return new Promise((resolve) => {\n                    // Setup commit button\n                    const commitButton = document.querySelector('#commit');\n\n                    // Wait for user input, check for valid selection, and either resolve or continue loop\n                    commitButton.addEventListener('click', handleCommit);\n\n                    // Setup rotate button\n                    const rotateButton = document.querySelector('#rotate');\n                    \n                    // wait for user input, rotate ship and continue loop \n                    rotateButton.addEventListener('click', handleRotate);\n\n                    function handleCommit () {\n                        commitButton.removeEventListener('click', handleCommit);\n                        commitButton.removeEventListener('click', handleCommit);\n                        let result = board.placeShip(game.players[playerIndex].selected.x, game.players[playerIndex].selected.y, board.shipsList[i].length, orientation, board.shipsList[i].name);\n                        resolve(result);\n                    }\n\n                    function handleRotate () {\n                        commitButton.removeEventListener('click', handleCommit);\n                        rotateButton.removeEventListener('click', handleRotate);\n                        orientation === 'horizontal'? orientation = 'vertical': orientation = 'horizontal';\n\n                        resolve(orientation);\n                    }\n                });\n            }\n        }\n\n        function setupListeners (game) {\n            // Get a nodelist of display buttons\n            const displayButtons = document.querySelectorAll('.displayButton');\n\n            // Iterate through them\n            displayButtons.forEach((button) => {\n                button.addEventListener('click', handleDisplayClick);\n            });\n\n            function handleDisplayClick (event) {\n\n                const key = event.srcElement.id;\n                const player = findWhoseTurn(game);\n\n                switch(key) {\n                    case 'myShips':\n                        player.show = 'myShips';\n                        break;\n                    case 'targeting':\n                        player.show = 'targeting';\n                        break;\n                }\n\n                Dom.updateBoards(game);\n                if (game.phase === 'placement') Dom.getPreview(game);\n\n            }\n\n            // Get a nodelist of the buttons on the arrow pad\n            const arrows = document.querySelectorAll('.arrow');\n    \n            // Iterate through them\n            arrows.forEach((button) => {\n                button.addEventListener('click', handleArrowClick);\n            });\n\n            function handleArrowClick (event) {\n\n                let key = event.srcElement.id;\n                let player = findWhoseTurn(game);\n                if(player.type === 'ai') return;\n\n                if (!player) throw new Error('Game not started');\n                switch(key) {\n                    case 'up':\n                        player.selected = moveSelection(player.selected, 0, -1);\n                        break;\n                    case 'down':\n                        player.selected = moveSelection(player.selected, 0, 1);\n                        break;\n                    case 'left':\n                        player.selected = moveSelection(player.selected, -1, 0);\n                        break;\n                    case 'right':\n                        player.selected = moveSelection(player.selected, 1, 0);\n                        break\n                    case 'commit':\n                        break\n                }\n\n                Dom.updateBoards(game);\n                if (game.phase === 'placement') Dom.getPreview(game);\n\n                \n                function moveSelection (selected, xChange, yChange) {\n                    selected.x = selected.x + xChange;\n                    selected.y = selected.y + yChange;\n\n                    if (selected.x > 9) selected.x = 9;\n                    if (selected.x < 0) selected.x = 0;\n\n                    if (selected.y > 9) selected.y = 9;\n                    if (selected.y < 0) selected.y = 0;\n\n                    return selected;\n                }\n\n\n            }\n\n        }\n\n        function toggleTurns (game) {\n            game.players.forEach((player) => {\n                player.isTurn ? player.isTurn = false: player.isTurn = true ;\n            });\n        }\n\n        async function playRound (game, aiTimer) {\n            let result = await takeTurns(aiTimer, game);\n            console.log(result.winner.name + ' has won in ' + result.turns + ' turns!');\n        }\n\n        async function takeTurns (aiTimer = 0, game, winner = false, turns = 0, player = 0) {\n            console.log(aiTimer);\n            // Initial render\n            Dom.updateBoards(game);\n\n            // Splash Screen\n            await Dom.splashscreen(game, 'transition');\n\n            // log progress for testing\n            console.log('player turn: ' + (player + 1));\n\n            // Ai players make random attacks on the other player's board\n            if (game.players[player].type === 'ai') {\n                game.players[player].attackRandom(game.boards[1 - player]);\n            // Wait for input if it's a human player\n            } else if (game.players[player].type === 'player') {\n                // Show my fleet screen on start of turn\n                game.findWhoseTurn(game).show = 'myShips';\n                Dom.updateBoards(game);\n\n                // Wait for user input and make attack\n                let coordinates = false;\n\n                while (!coordinates) {\n                    coordinates = await getAttack(game, player);\n                }\n                \n                \n            }\n            \n            // Render boards\n            Dom.updateBoards(game);\n            \n            // Pause so the player can see what they chose\n            if (game.findWhoseTurn().type === 'player') await sleep();\n\n            // Check for winner and return\n            winner = game.testWinner();\n\n            // Toggle player turns\n            toggleTurns(game);\n\n            if (winner){\n                let result = new Promise((resolve) => {\n                    resolve({ winner, turns });\n                });\n\n                return result;\n            } \n\n            // If there's not a winner,\n            // call recursive function and wait for the result, then return it\n            \n            let result = await recurse();\n            return result;\n\n            function getAttack (game, playerTurn) {\n                return new Promise((resolve) => {\n                    // Set up commit button\n                    const commitButton = document.querySelector('#commit');\n                    // Dom.updateInfoBoxes(player.selected.x, player.selected.y);\n                    let player = game.players[playerTurn];\n\n                    commitButton.addEventListener('click', handleResolve);\n\n                    function handleResolve () {\n                        // Remove event listener to prevent duplicate calls\n                        commitButton.removeEventListener('click', handleResolve);\n\n                        // Check if input is valid\n                        if (checkValidInput(player.selected.x, player.selected.y)){\n\n                            // Attempt an attack\n                            let attempt = game.boards[1 - playerTurn].receiveAttack(player.selected.x, player.selected.y);\n                            \n                            // If the attack succeeds, resolve the return value\n                            if (attempt) {\n                                resolve({ x: player.selected.x, y: player.selected.y});\n                            \n                            // If the attack fails, resolve false\n                            } else {\n                                console.log('Invalid Placement');\n                                resolve(false);\n                            }\n                        } else {\n                            resolve(false);\n                        }\n                \n\n\n                        function checkValidInput (x, y) {\n                            if (x >= 0 && x < 10 && y >= 0 && y < 10) {\n                                return true;\n                            } else {\n                                console.log('out of range');\n                                return false;\n                            }\n                        }\n                    }\n                });\n            }\n\n            function recurse () {\n                return new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(takeTurns(aiTimer, game, winner, ++turns, player = 1 - player));\n                    }, aiTimer);;\n                });\n            } \n        };\n    }\n\n    function sleep ()\n     {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, 2000);\n        });\n    }\n\n    function findWhoseTurn (game = this) {\n        let result = false;\n        game.players.forEach((player) => {\n            if (player.isTurn){\n                result = player;\n            }\n        });\n        return result;\n    }\n\n    function findWhoseNextTurn (game = this) {\n        let result = false;\n        game.players.forEach((player, index) => {\n            if (player.isTurn) {\n                result = game.players[1 - index];\n            }\n        });\n        return result;\n    }\n\n    return {\n        players,\n        boards,\n        Ai,\n        testWinner,\n        mainLoop,\n        phase: 'placement',\n        findWhoseTurn,\n        findWhoseNextTurn\n    };\n}\n\nfunction testWinner () {\n    const boards = this.boards;\n\n    let winner = false;\n    boards.forEach((board, index) => {\n        if (board.shipsSunk() === 'ALL') {\n            winner = this.players[1 - index];\n        }\n    });\n    return winner;\n}\n\nexport {\n    initialize,\n};","// Entry Point\n\nimport css from './styles.css';\nimport * as Game from './game.js';\nimport * as Dom from './dom-manipulation.js'\n\n\n\nplayGame();\n\nasync function playGame () {\n\n    // Landing Screen\n    await Dom.landingScreen();\n    // Choose players\n\n    // Initialize Game \n    let newGame = Game.initialize('player', 'player');\n    Dom.initialize();\n\n    // Loop\n    newGame.mainLoop();\n\n}\n\nexport {\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","createPlayer","board","type","attack","x","y","receiveAttack","attackRandom","grid","randomCoords","isTurn","name","selected","placing","ship","orientation","show","length","Math","floor","random","createShip","totalHits","hit","this","isSunk","createBoard","i","row","h","push","attacked","populateBoard","placeShip","shipsSunk","ships","shipsList","checkIfValid","Error","checkIfRoom","commitPlacement","gameboardObj","newShip","Ship","node","isInBounds","sunkShipCount","forEach","index","populate","keepGoing","randomOrientation","initialize","boards","document","querySelectorAll","letters","newDiv","createElement","classList","add","style","backgroundColor","gridArea","appendChild","addEmpty","innerText","renderLetters","gridColumn","gridRow","renderNumbers","j","className","meta","renderNodeSquares","updateBoards","game","players","playerWhoseTurn","findWhoseTurn","arrow","phase","disabled","rotateButton","querySelector","display","targetingButton","boardNameplate","renderedBoard","player","square","findNode","preview","remove","slice","color","renderOwnMeta","showOrHideBoard","renderTheirMeta","found","yIndex","xIndex","showIfTurn","contains","showMyShips","showTargeting","getPreview","ownRenderedBoard","findRenderedSquare","result","landingScreen","addLandingModal","message","newModal","newP","fontSize","body","Promise","resolve","setTimeout","splashscreen","mode","addModal","setupPlayerTransition","modal","infoP","readyButton","cssText","console","log","clearModal","addEventListener","handleReadyClick","removeEventListener","removeModal","innerHTML","player1","player2","Gameboard","playerTypes","mainLoop","playerPlaceLoop","setupListeners","toggleTurns","playRound","takeTurns","getAttack","recurse","aiTimer","winner","turns","playerTurn","commitButton","handleResolve","checkValidInput","Dom","coordinates","sleep","testWinner","handleDisplayClick","event","srcElement","id","handleArrowClick","moveSelection","xChange","yChange","button","playerIndex","waitForInput","handleCommit","handleRotate","Ai","findWhoseNextTurn","newPlayer","Player","newGame","Game","playGame"],"sourceRoot":""}