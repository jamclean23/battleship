{"version":3,"file":"battleship/battleship.bundle-af116ee6316be72069d7.js","mappings":"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","sources":["webpack://webpack/webpack/bootstrap","webpack://webpack/webpack/runtime/define property getters","webpack://webpack/webpack/runtime/hasOwnProperty shorthand","webpack://webpack/webpack/runtime/make namespace object","webpack://webpack/./src/battleship/player.js","webpack://webpack/./src/battleship/ship.js","webpack://webpack/./src/battleship/gameboard.js","webpack://webpack/./src/battleship/ai.js","webpack://webpack/./src/battleship/dom-manipulation.js","webpack://webpack/./src/battleship/game.js","webpack://webpack/./src/battleship/battleship.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Functions for creation and management of player objects\n\nfunction createPlayer (type = 'player') {\n\n    if (!(type === 'ai')) type = 'player';\n\n    let board;\n\n    function attack (board, x, y) {\n        return board.receiveAttack(x, y);\n    }\n\n    function attackRandom(board) {\n        let attack;\n        while (!attack) {\n            let grid = randomCoords(board);\n            attack = board.receiveAttack(grid.x, grid.y);\n        }\n    }\n\n    if (type === 'player') {\n        return {\n            isTurn: false,\n            type,\n            board,\n            attack,\n            name: 'Player',\n            selected: {\n                x: 0,\n                y: 0\n            },\n            placing: {\n                ship: false,\n                orientation: 'horizontal'\n\n            },\n            show: 'myShips'\n        }  \n    } else if (type === 'ai') {\n        return {\n            isTurn: false,\n            type,\n            board,  \n            attackRandom,\n            name: 'Ai'  \n        }\n    }\n}\n\nfunction randomOrientation () {\n    let integer = Math.floor(Math.random() * 10);\n    if (integer > 5) {\n        return 'horizontal';\n    } else {\n        return 'vertical';\n    }\n}\n\nfunction randomCoords (board) {\n    let length = board.board.length;\n    let x = Math.floor(Math.random() * length);\n    let y = Math.floor(Math.random() * length);\n\n    return {\n        x,\n        y\n    }\n}\n\nexport {\n    createPlayer\n}","// Functions for creation and management of ship objects\n\nfunction createShip (length, name) {\n\n    let totalHits = 0;\n\n    function hit () {\n        this.totalHits++;\n    }\n    \n    function isSunk () {\n        if (this.totalHits >= this.length) {\n            return true;\n        }\n        return false;\n    }\n\n    return {\n        length,\n        totalHits,\n        hit,\n        isSunk,\n        name\n    }\n}\n\nexport {\n    createShip,\n}","// Function for creation and management of gameboard objects\n\nimport * as Ship from './ship.js';\n\nfunction createBoard () {\n\n    let board = populateBoard();\n\n    let shipsList = [\n        {\n            name: 'Carrier',\n            length: 5\n        },\n        {\n            name: 'Battleship',\n            length: 4\n        },\n        {\n            name: 'Destroyer',\n            length: 3\n        },\n        {\n            name: 'Submarine',\n            length: 3\n        },\n        {\n            name: 'Patrol Boat',\n            length: 2\n        }\n    ];\n\n    function populateBoard () {\n        let board = [];\n\n        for (let i = 0; i < 10; i ++) {\n            let row = [];\n            for (let h = 0; h < 10; h++) {\n                row.push(createNode());\n            }\n            board.push(row);\n        }\n        return board;\n    }\n\n    function createNode () {\n        return {\n            ship: false,\n            attacked: false,\n        };\n    }\n\n    return {\n        board,\n        receiveAttack,\n        placeShip,\n        shipsSunk,\n        ships: [],\n        shipsList\n    };\n}\n\nfunction placeShip (x, y, length, orientation = 'horizontal', name) {\n    // Check if the current node is valid\n    if (checkIfValid(x, y, this.board)){\n        // Check if orientation has been specified\n        if (orientation === 'horizontal' || orientation === 'vertical') {\n            // Check that there is room for the placement\n            if (checkIfRoom(x, y, length, orientation, this.board)) {\n                commitPlacement(x, y, length, orientation, this.board, this, name);\n                return 'valid';\n            }\n        } else {\n            throw new Error('Orientation not specified');\n        }   \n    }\n\n    return \"invalid\"\n\n    function commitPlacement (x, y, length, orientation, board, gameboardObj, name) {\n\n        const newShip = Ship.createShip(length, name);\n        gameboardObj.ships.push(newShip);        \n\n        for (let i = 0; i < length; i++) {\n            board[y][x].ship = newShip;\n            if (orientation === 'horizontal') x++;\n            if (orientation === 'vertical') y++;\n        }\n    }\n\n    function checkIfRoom (x, y, length, orientation, board) {\n        for (let i = 0; i < length; i ++) {\n            if (!(checkIfValid(x, y, board))) {\n                return false;\n            };\n\n            if (orientation === 'horizontal') {\n                x++;\n            } else {\n                y++;\n            }\n        }\n        return true;\n    }\n\n    function checkIfValid (x, y, board) {\n        if (y < 0 || y > 9) return false;\n        if (x < 0 || x > 9 ) return false;\n        if (board[y][x].ship || board[y][x].attacked) return false;\n        return true;\n    }\n\n}\n\nfunction receiveAttack (x, y) {\n    let node = this.board[y][x];\n\n    if (!isInBounds(x, y) || node.attacked) return false;\n\n    node.attacked = true;\n\n    if (node.ship){\n        node.ship.totalHits++;\n        return 'hit';\n    } else {\n        return 'miss';\n    }\n}\n\nfunction shipsSunk () {\n    let sunkShipCount = 0;\n    let ships = this.ships;\n    ships.forEach((ship, index) => {\n        if (ship.isSunk()) sunkShipCount++;\n    });\n    if (ships.length === sunkShipCount && ships.length > 0) return 'ALL';\n    return sunkShipCount;\n\n}\n\nfunction isInBounds (x, y) {\n    if (x < 0 || x > 9 || y < 0 || y > 9) return false;\n    return true;\n}\n\nexport {\n    createBoard\n}","// Functions relating to ai and randomization\n\nfunction populate (board) {\n    board.shipsList.forEach((ship, index) => {\n        let keepGoing = 'invalid';\n        while (keepGoing === 'invalid') {\n            let orientation = randomOrientation();\n            let grid = randomCoords(board);\n            keepGoing = board.placeShip(grid.x, grid.y, ship.length, orientation, ship.name);\n        }\n    });\n\n}\n\nfunction randomOrientation () {\n    let integer = Math.floor(Math.random() * 10);\n    if (integer > 5) {\n        return 'horizontal';\n    } else {\n        return 'vertical';\n    }\n}\n\nfunction randomCoords (board) {\n    let length = board.board.length;\n    let x = Math.floor(Math.random() * length);\n    let y = Math.floor(Math.random() * length);\n\n    return {\n        x,\n        y\n    }\n}\n\nexport {\n    populate,\n}","// Dom methods and rendering\n\nfunction initialize () {\n    // Render guides for each board\n    const boards = document.querySelectorAll('.board');\n    const letters = [\n        'A', 'B', 'C', 'D', 'E', 'F',\n        'G', 'H', 'I', 'J'\n    ];\n\n    boards.forEach((board) => {\n        addEmpty(board);\n        renderLetters(board);\n        renderNumbers(board);\n        renderNodeSquares(board);\n    });\n\n    function addEmpty (board) {\n        // Create empty square and give it a class\n        let newDiv = document.createElement('div');\n        newDiv.classList.add('empty');\n        newDiv.classList.add('gridSquare');\n        \n        // Placement\n        newDiv.style.backgroundColor = 'black';\n        newDiv.style.gridArea = '0/0/1/1';\n        \n        // Add to DOM\n        board.appendChild(newDiv);\n    }\n\n    function renderLetters (board) {\n\n        // Generate ten divs\n        for (let i = 0; i < 10; i++) {\n            let newDiv = document.createElement('div');\n\n            // Assign a letter to each of them in order\n            newDiv.innerText = letters[i];\n            \n            // Give them a class\n            newDiv.classList.add('letter');\n            newDiv.classList.add('gridSquare');\n\n\n            // Placement\n            newDiv.style.gridArea = '0/' + i + '/1/' + (i + 1);\n\n            // Add to DOM\n            board.appendChild(newDiv);\n        }\n    }\n\n    function renderNumbers (board) {\n        // Generate ten divs\n        for (let i = 0; i < 10; i++) {\n            let newDiv = document.createElement('div');\n\n            // Assign a number to each in order\n            newDiv.innerText = i + 1;\n\n            // Give them a class\n            newDiv.classList.add('number');\n            newDiv.classList.add('gridSquare');\n\n            // Placement\n            newDiv.style.gridColumn = '0 / 1';\n            newDiv.style.gridRow = (i + 2) + '/' + (i + 3);\n\n            // Add to DOM\n            board.appendChild(newDiv);\n        }\n    }\n\n    function renderNodeSquares(board) {\n        // create 100 divs, separated by ten to place them in rows\n        for (let i = 0; i < 10; i++) {\n            for (let j = 0; j < 10; j++) {\n                let newDiv = document.createElement('div');\n\n                // Give it a class\n                newDiv.className = 'gridSquare gameSquare';\n\n                // Attach metadata about positoning\n                newDiv.meta = {\n                    x: j,\n                    y: i\n                }\n\n                // Placement\n                newDiv.style.gridColumn = (newDiv.meta.x + 2) + ' / ' +  (newDiv.meta.x + 3);\n                newDiv.style.gridRow = (newDiv.meta.y + 2) + ' / ' +  (newDiv.meta.y + 3);\n\n                board.appendChild(newDiv);\n            }\n        }\n    }\n}\n\nfunction updateBoards (game) {\n\n    let boards = game.boards;\n    let players = game.players;\n    let playerWhoseTurn = game.findWhoseTurn(game);\n\n    // Disable arrows and commit while in fleet view\n    const arrows = document.querySelectorAll('.arrow');\n    arrows.forEach((arrow, index) => {\n        if (playerWhoseTurn.show === 'myShips' && game.phase != 'placement') {\n            arrow.disabled = true;\n        } else {\n            arrow.disabled = false;\n        }\n    });\n\n    // Hide the rotate button after placement phase\n    const rotateButton = document.querySelector('#rotate');\n    if (game.phase != 'placement') rotateButton.style.display = 'none';\n\n    // Hide the radar button during placement phase\n    const targetingButton = document.querySelector('#targeting');\n    if (game.phase === 'placement') {\n        targetingButton.style.display = 'none';\n    } else {\n        targetingButton.style.display = 'grid';\n    }\n\n    // If it's the ai's turn, do not render\n    if (playerWhoseTurn.type === 'ai') return;\n\n    // Get DOM board nameplate\n    const boardNameplate = document.querySelector('#boardIdent');\n    // Update board nameplate\n    if (playerWhoseTurn.show === 'myShips') {\n        boardNameplate.innerText = 'My Fleet';\n    } else {\n        boardNameplate.innerText = 'Radar';\n    }\n    \n\n    // Get DOM player nameplate\n    const playerNameplate = document.querySelector('#playerIdent');\n    // Update player nameplate\n    playerNameplate.innerText = playerWhoseTurn.name;\n\n    // Get player's own boards from the DOM\n    const ownRenderedBoards = document.querySelectorAll('.board.own');\n\n    // Iterate through 'own' boards\n    ownRenderedBoards.forEach((renderedBoard, index) => {\n        // Assign an owner to each board\n        renderedBoard.player = players[index];\n\n        // Hide the board if it's an ai\n        if (renderedBoard.player.type === 'ai' && game.players[1 - index].type === 'player') {\n            renderedBoard.style.display = 'none';\n        }\n\n        // Get nodelist of all squares on the boards\n        const nodeSquares = renderedBoard.querySelectorAll('.gameSquare');\n\n        // Iterate though them\n        nodeSquares.forEach((square) => {\n            // Assign node to the square's meta\n            square.meta.square = findNode(square.meta.x, square.meta.y, boards[index]);\n\n            // Render meta\n            renderOwnMeta(game, renderedBoard, square);     \n        });\n\n        // Decide whether or not to display the board\n        showOrHideBoard(renderedBoard);\n    });\n\n    // Get players' 'their' boards from the Dom\n    const theirRenderedBoards = document.querySelectorAll('.board.theirs');\n\n    // Iterate through boards\n    theirRenderedBoards.forEach((renderedBoard, index) => {\n        // Assign an owner to each board\n        renderedBoard.player = players[index];\n\n        // Hide the board if it's an ai\n        if (renderedBoard.player.type === 'ai' && game.players[1 - index].type === 'player') {\n            renderedBoard.style.display = 'none';\n        }\n\n        // Get a nodelist of all the squares on the board\n        const nodeSquares = renderedBoard.querySelectorAll('.gameSquare');\n\n        // Iterate through them\n        nodeSquares.forEach((square) => {\n\n            // Assign a node to the square's meta\n            square.meta.square = findNode(square.meta.x, square.meta.y, boards[1 - index]);\n\n            // Render meta\n            renderTheirMeta(game, renderedBoard, square);\n        });\n\n        // Decide whether or not to display the board\n        showOrHideBoard(renderedBoard);\n    });\n\n}\n\nfunction renderTheirMeta (game, renderedBoard, square) {\n    const ship = square.meta.square.ship;\n\n    if (ship && square.meta.square.attacked) {\n        square.style.backgroundColor = 'red';\n        square.innerText = ship.name.slice(0, 1); \n        square.style.color = 'white';\n    }\n\n    if (!ship && square.meta.square.attacked) {\n        square.style.backgroundColor = 'blue';\n    }\n\n    if (renderedBoard.player.isTurn && renderedBoard.player.selected) {\n        if (game.phase === 'game' && square.meta.x === renderedBoard.player.selected.x && square.meta.y === renderedBoard.player.selected.y) {\n            square.classList.add('selected');\n        } else {\n            square.classList.remove('selected');\n        }\n    }\n}\n\nfunction renderOwnMeta (game, renderedBoard, square) {\n    const ship = square.meta.square.ship;\n\n    if (square.meta.preview) {\n        square.classList.add('preview');\n    } else {\n        square.classList.remove('preview');\n    }\n    \n    if (ship) {\n        square.innerText = ship.name.slice(0, 1); \n        square.style.backgroundColor = 'gray';\n        square.style.color = 'white';\n    } \n\n    if (ship && square.meta.square.attacked) {\n        square.style.backgroundColor = 'red';\n    }\n\n    if (!ship && square.meta.square.attacked) {\n        square.style.backgroundColor = 'blue';\n    }\n\n    if (renderedBoard.player.isTurn && renderedBoard.player.selected) {\n        if (game.phase === 'placement' && square.meta.x === renderedBoard.player.selected.x && square.meta.y === renderedBoard.player.selected.y) {\n            square.classList.add('selected');\n        } else {\n            square.classList.remove('selected');\n        }\n    } else {\n        square.classList.remove('selected');\n    }\n}\n\nfunction findNode (x, y, board) {\n    // Search for the node\n    let found = false;\n    board.board.forEach((row, yIndex) => {\n        row.forEach((square, xIndex) => {\n            if (xIndex === +x && yIndex === +y) found = square;\n        });\n    });\n\n    // If it's found then return it\n    if (found) return found;\n\n    // If it isn't then throw an error\n    throw new Error('Node Square mismatch');\n    \n}\n\nfunction showOrHideBoard (board) {\n    \n    showIfTurn(board);\n    if (board.player.show === 'myShips') showMyShips(board);\n    if (board.player.show === 'targeting') showTargeting(board);\n\n    function showMyShips (board) {\n        if (!board.classList.contains('own')) {\n            board.style.display = 'none';\n        } \n    }\n    \n    function showTargeting (board) {\n        if (!board.classList.contains('theirs')) {\n            board.style.display = 'none';\n        } \n    }\n    \n    function showIfTurn (board) {\n        if (board.player.isTurn) {\n            board.style.display = 'grid';\n        } else {\n            board.style.display = 'none';\n        }\n    }\n}\n\nfunction getPreview (game) {\n    // Calculate which squares should be used for the preview\n\n    // Player whose turn it is\n    let player = game.findWhoseTurn(game);\n\n    // Get own rendered board for the player\n    const ownRenderedBoards = document.querySelectorAll('.board.own');\n\n    let ownRenderedBoard;\n    ownRenderedBoards.forEach((renderedBoard) => {\n        if (renderedBoard.player === player) {\n            ownRenderedBoard = renderedBoard;\n        }\n    });\n\n    // Get preview squares and assign\n    for (let i = 1; i < player.placing.ship.length; i++) {\n        if (player.placing.orientation === 'horizontal') {\n            let square = findRenderedSquare(player.selected.x + i, player.selected.y, ownRenderedBoard);\n            if (square) square.classList.add('preview');\n            \n        } else if (player.placing.orientation === 'vertical') {\n            let square = findRenderedSquare(player.selected.x, player.selected.y + i, ownRenderedBoard);\n            if (square) square.classList.add('preview');\n        }\n    }\n\n    function findRenderedSquare (x, y, renderedBoard) {\n        const squares = renderedBoard.querySelectorAll('.gameSquare');\n        let result;\n        squares.forEach((square) => {\n            if (square.meta.x === x && square.meta.y === y) {\n                result = square;\n            }\n        });\n        if (result) return result;\n        return false;\n    }\n}\n\nasync function landingScreen () {\n    return new Promise((resolve) => {\n        // Add landing screen to the DOM\n        addLandingModal();\n        // Wait for three seconds and then clear\n        setTimeout(() => {\n            resolve(clearModal());\n        }, 4000);\n    });\n\n    function addLandingModal (message = 'BATTLEBOATS') {\n        // Create new modal\n        let newModal = document.createElement('div');\n        // Give it the modal class\n        newModal.classList.add('modal');\n        // Add content\n        let newP = document.createElement('p');\n        newP.innerText = message;\n        newP.style.color = 'white';\n        newP.style.fontSize = '12vw';\n        newModal.appendChild(newP);\n        // Add to the DOM\n        const body = document.querySelector('body');\n        body.appendChild(newModal);\n    }\n}\n\nasync function playerChoiceScreen () {\n    return new Promise((resolve) => {\n\n        // Overlay the screen with a modal if there isn't an existing one\n        const modal = document.querySelector('.modal');\n        if (!modal) addChoiceModal();\n\n        // Add a class\n        modal.classList.add('playerChoiceModal');\n\n        // Fill with content for making player choices\n        for (let i = 0; i < 4; i++) {\n            let newDiv = document.createElement('div');\n            switch (i) {\n                case 0:\n                    newDiv.innerText = 'BATTLEBOATS';\n                    newDiv.style.color = 'white';\n                    break;\n                case 1:\n                    createPlayerInputBox(1);\n                    break;\n                case 2:\n                    createPlayerInputBox(2);\n                    break;\n                case 3:\n                    // Create button\n                    let button = document.createElement('button');\n\n                    // Class\n                    button.classList.add('readyButton');\n\n                    // Content\n                    button.innerText = 'Ready';\n\n                    // Add to DOM\n                    newDiv.appendChild(button);\n            }\n\n            function createPlayerInputBox (playerNumber) {\n                // Nameplate\n                let playerP = document.createElement('p');\n                playerP.innerText = 'Player ' + playerNumber;\n                playerP.style.color = 'white';\n                newDiv.appendChild(playerP);\n\n                // Div to hold text input and label\n                let inputDiv = document.createElement('div');\n                // Add class\n                inputDiv.classList.add('inputDiv');\n                // Add to DOM\n                newDiv.appendChild(inputDiv);\n\n                // Text input for naming\n                let input = document.createElement('input');\n                input.setAttribute('type', 'text');\n                input.id = 'player'+ playerNumber + 'Name';\n                input.value = 'Player ' + playerNumber;\n                inputDiv.appendChild(input);\n\n                // Label for input box\n                let label = document.createElement('label');\n                label.setAttribute('for', 'player' + playerNumber + 'Name');\n                label.style.color = 'white';\n                label.innerText = 'Name:';\n                inputDiv.insertBefore(label, input);\n\n                // Add option for selecting player type if player 2\n                if (playerNumber === 2) {\n\n                    // Create div to hold select and label\n                    let selectDiv = document.createElement('div');\n                    // Add Class\n                    selectDiv.classList.add('selectDiv');\n                    // Add to DOM\n                    newDiv.appendChild(selectDiv);\n                    \n                    // Create label\n                    let label = document.createElement('label');\n                    label.innerText = 'Type:';\n                    label.setAttribute('for', 'player2type');\n                    selectDiv.appendChild(label);\n\n                    // Create select element\n                    let select = document.createElement('select');\n                    select.id = 'player2type';\n                    // Add to DOM\n                    selectDiv.appendChild(select);\n\n\n                    // Add options\n                    for (i = 0; i < 2; i++) {\n                        let option = document.createElement('option');\n                        switch (i) {\n                            case 0:\n                                option.setAttribute('value', 'player');\n                                option.innerText = 'player';\n                                break;\n                            case 1:\n                                option.setAttribute('value', 'ai');\n                                option.innerText = 'ai';\n                        }\n                        select.appendChild(option);\n                    }\n                }\n            }\n            // Add to DOM\n            modal.appendChild(newDiv);\n            \n        }\n\n        // Resolve on button click\n        const readyButton = document.querySelector('.readyButton');\n\n        readyButton.addEventListener('click', handleReadyClick);\n\n        function handleReadyClick () {\n            readyButton.removeEventListener('click', handleReadyClick);\n\n            resolve([\n                {\n                    name: document.querySelector('#player1Name').value,\n                    type: 'player'\n                },\n                {\n                    name: document.querySelector('#player2Name').value,\n                    type: document.querySelector('#player2type').value\n                }\n            ]);\n            clearModal();\n            const modal = document.querySelector('.modal');\n            modal.classList.remove('playerChoiceModal');\n        }\n    });\n\n    function addChoiceModal () {\n        // Create a new modal\n        let newModal = document.createElement('div');\n        // Add a class\n        newModal.classList.add('modal');\n        // Add to the DOM\n        const body = document.querySelector('body');\n        body.appendChild(newModal);\n    }\n}\n\nfunction splashscreen (game, mode, message = '') {\n    \n    return new Promise((resolve) => {\n        \n        // Overlay the screen with a modal if there isn't an existing one\n        const modal = document.querySelector('.modal');\n        if (!modal) {\n            addModal(game, message);\n        } else {\n            clearModal();\n            setupPlayerTransition(modal, game, message);\n        }\n        // Get the ready button\n        const readyButton = document.querySelector('.modal .readyButton');\n        // Add eventlistener\n        readyButton.addEventListener('click', handleReadyClick);\n        \n        function handleReadyClick () {\n            readyButton.removeEventListener('click', handleReadyClick);\n            if (game.findWhoseTurn().type === 'player') {\n                removeModal(game);\n            }\n            resolve();\n        }\n    });\n\n    function addModal (game, message) {\n        // Create new modal\n        let newModal = document.createElement('div');\n\n        // Set css styling/class\n        newModal.classList.add('modal');\n\n        // Add to the dom\n        document.querySelector('body').appendChild(newModal);\n        \n        // Add content\n        setupPlayerTransition(newModal, game, message);\n    }\n    \n    function setupPlayerTransition (modal, game, message) {\n        \n        // Add info paragraph\n        let infoP = document.createElement('p');\n\n        // Add inner text\n        infoP.innerText = game.findWhoseTurn().name + ' is next' + '\\n' + message;\n\n        // set css styling/class\n        infoP.classList.add('modalMessage');\n        \n        // Add to modal\n        modal.appendChild(infoP);\n\n\n        // make a ready button\n        let readyButton = document.createElement('button');\n        \n        // Add inner text\n        readyButton.innerText = 'Ready!';\n        \n        // Set css styling/class\n        readyButton.classList.add('readyButton');\n        readyButton.style.cssText = \"font-size: 3vh\";\n        \n        // Add to modal\n        modal.appendChild(readyButton); \n    }\n}\n\nfunction winnerScreen (result) {\n    let winner = result.winner.name;\n    let turns = result.turns;\n    return new Promise((resolve) => {    \n        // Create new modal\n        let modal = document.createElement('div');\n        // Give it a class\n        modal.classList.add('modal');\n        // Add to DOM\n        const body = document.querySelector('body');\n        body.appendChild(modal);\n\n        // Fill with content\n        // A p element that displays a message with who won\n        let p = document.createElement('p');\n        p.style.color = 'white';\n        p.innerText = winner + ' has won the battle!\\nIn ' + turns + 'turns.' ;\n        modal.appendChild(p);\n        // A button to ask whether to play again\n        let button = document.createElement('button');\n        // Add a class\n        button.classList.add('readyButton');\n        button.innerText = 'Play Again?';\n        modal.appendChild(button);\n\n        // On button click, refresh the page\n        button.addEventListener('click', playAgain);\n\n        function playAgain () {\n            button.removeEventListener('click', playAgain);\n            resolve();\n            window.location.reload();\n        }\n\n\n    });\n}\n\nfunction removeModal () {\n    // Get the modal\n    const modal = document.querySelector('.modal');\n    // Remove it\n    modal.remove();\n}\n\nfunction clearModal () {\n    const modal = document.querySelector('.modal');\n    modal.innerHTML = '';\n}\n\nexport {\n    initialize,\n    updateBoards,\n    getPreview,\n    splashscreen,\n    landingScreen,\n    playerChoiceScreen,\n    winnerScreen\n}","import * as Player from './player.js';\nimport * as Gameboard from './gameboard.js';\nimport * as Ai from './ai.js';\nimport * as Dom from './dom-manipulation.js';\n\n\nfunction initialize (player1, player2 ) {\n\n    // Initialize game boards\n    const boards = [];\n\n    for (let i = 0; i < 2; i++) {\n        boards[i] = Gameboard.createBoard();\n    }\n\n    // Initialize players\n    const playerTypes = [player1.type, player2.type];\n    const players = [];\n\n    playerTypes.forEach((player, index) => {\n        let newPlayer = Player.createPlayer(player);\n        newPlayer.board = boards[index];\n        players.push(newPlayer);\n    });\n\n    // Name players\n    players.forEach((player, index) => {\n        player.name = index === 0? player1.name : player2.name;\n    });\n\n    // Main game loop\n    async function mainLoop () {\n        // SETUP\n        \n        // Give player 1 the starting turn\n        this.players[0].isTurn = true;\n\n        // Initialize arrow keys\n        setupListeners(this);\n        \n        // Populate game boards\n        console.log('Placement Phase');\n        // Determine player type and appropriate placement method\n        for (let i = 0; i < this.boards.length; i++) {\n            // Draw boards\n            Dom.updateBoards(this);\n            await Dom.splashscreen(this, 'transition', 'Placement Phase');\n\n            if (this.players[i].type === 'ai') {\n                this.Ai.populate(this.boards[i]);\n            } else if (this.players[i].type === 'player') {\n                await playerPlaceLoop(this, this.boards[i], i);\n                players[i].show = 'myShips';\n            }\n            await sleep();\n            toggleTurns(this);\n        }\n        \n        // Draw boards\n        Dom.updateBoards(this);\n        \n        // Game loop\n        console.log('Game Phase');\n        this.phase = 'game';\n        playRound(this, 0);\n\n        async function playerPlaceLoop (game, board, playerIndex) {\n\n            // Iterate through ships list, continuing once placement is valid\n            for (let i = 0; i < board.shipsList.length; i++) {\n                let player = game.players[playerIndex];\n                player.placing.ship = board.shipsList[i];\n                player.placing.orientation = 'horizontal';\n\n                // Initialize preview\n                Dom.getPreview(game);\n\n                let result = 'invalid';\n\n                while (result != 'valid') {\n\n                    result = await waitForInput(board, i, player.placing.orientation);\n\n                    if (result === 'horizontal' || result === 'vertical') {\n                        player.placing.orientation = result;\n                    }\n                    Dom.updateBoards(game);\n                    Dom.getPreview(game);\n                }\n            }\n\n            // Return after finished\n            return new Promise((resolve) => {\n                resolve();\n            });\n\n            function waitForInput (board, i, orientation) {\n                return new Promise((resolve) => {\n                    // Setup commit button\n                    const commitButton = document.querySelector('#commit');\n\n                    // Wait for user input, check for valid selection, and either resolve or continue loop\n                    commitButton.addEventListener('click', handleCommit);\n\n                    // Setup rotate button\n                    const rotateButton = document.querySelector('#rotate');\n                    \n                    // wait for user input, rotate ship and continue loop \n                    rotateButton.addEventListener('click', handleRotate);\n\n                    function handleCommit () {\n                        commitButton.removeEventListener('click', handleCommit);\n                        commitButton.removeEventListener('click', handleCommit);\n                        let result = board.placeShip(game.players[playerIndex].selected.x, game.players[playerIndex].selected.y, board.shipsList[i].length, orientation, board.shipsList[i].name);\n                        resolve(result);\n                    }\n\n                    function handleRotate () {\n                        commitButton.removeEventListener('click', handleCommit);\n                        rotateButton.removeEventListener('click', handleRotate);\n                        orientation === 'horizontal'? orientation = 'vertical': orientation = 'horizontal';\n\n                        resolve(orientation);\n                    }\n                });\n            }\n        }\n\n        function setupListeners (game) {\n            // Get a nodelist of display buttons\n            const displayButtons = document.querySelectorAll('.displayButton');\n\n            // Iterate through them\n            displayButtons.forEach((button) => {\n                button.addEventListener('click', handleDisplayClick);\n            });\n\n            function handleDisplayClick (event) {\n\n                const key = event.srcElement.id;\n                const player = findWhoseTurn(game);\n\n                switch(key) {\n                    case 'myShips':\n                        player.show = 'myShips';\n                        break;\n                    case 'targeting':\n                        player.show = 'targeting';\n                        break;\n                }\n\n                Dom.updateBoards(game);\n                if (game.phase === 'placement') Dom.getPreview(game);\n\n            }\n\n            // Get a nodelist of the buttons on the arrow pad\n            const arrows = document.querySelectorAll('.arrow');\n    \n            // Iterate through them\n            arrows.forEach((button) => {\n                button.addEventListener('click', handleArrowClick);\n            });\n\n            function handleArrowClick (event) {\n\n                let key = event.srcElement.id;\n                let player = findWhoseTurn(game);\n                if(player.type === 'ai') return;\n\n                if (!player) throw new Error('Game not started');\n                switch(key) {\n                    case 'up':\n                        player.selected = moveSelection(player.selected, 0, -1);\n                        break;\n                    case 'down':\n                        player.selected = moveSelection(player.selected, 0, 1);\n                        break;\n                    case 'left':\n                        player.selected = moveSelection(player.selected, -1, 0);\n                        break;\n                    case 'right':\n                        player.selected = moveSelection(player.selected, 1, 0);\n                        break\n                    case 'commit':\n                        break\n                }\n\n                Dom.updateBoards(game);\n                if (game.phase === 'placement') Dom.getPreview(game);\n\n                \n                function moveSelection (selected, xChange, yChange) {\n                    selected.x = selected.x + xChange;\n                    selected.y = selected.y + yChange;\n\n                    if (selected.x > 9) selected.x = 9;\n                    if (selected.x < 0) selected.x = 0;\n\n                    if (selected.y > 9) selected.y = 9;\n                    if (selected.y < 0) selected.y = 0;\n\n                    return selected;\n                }\n\n\n            }\n\n        }\n\n        function toggleTurns (game) {\n            game.players.forEach((player) => {\n                player.isTurn ? player.isTurn = false: player.isTurn = true ;\n            });\n        }\n\n        async function playRound (game, aiTimer) {\n            let result = await takeTurns(aiTimer, game);\n            Dom.winnerScreen(result);\n        }\n\n        async function takeTurns (aiTimer = 0, game, winner = false, turns = 0, player = 0) {\n            console.log(aiTimer);\n            // Initial render\n            Dom.updateBoards(game);\n\n            // Splash Screen\n            await Dom.splashscreen(game, 'transition');\n\n            // log progress for testing\n            console.log('player turn: ' + (player + 1));\n\n            // Ai players make random attacks on the other player's board\n            if (game.players[player].type === 'ai') {\n                game.players[player].attackRandom(game.boards[1 - player]);\n            // Wait for input if it's a human player\n            } else if (game.players[player].type === 'player') {\n                // Show my fleet screen on start of turn\n                game.findWhoseTurn(game).show = 'myShips';\n                Dom.updateBoards(game);\n\n                // Wait for user input and make attack\n                let coordinates = false;\n\n                while (!coordinates) {\n                    coordinates = await getAttack(game, player);\n                }\n                \n                \n            }\n            \n            // Render boards\n            Dom.updateBoards(game);\n            \n            // Pause so the player can see what they chose\n            if (game.findWhoseTurn().type === 'player') await sleep();\n\n            // Check for winner and return\n            winner = game.testWinner();\n\n            // Toggle player turns\n            toggleTurns(game);\n\n            if (winner){\n                let result = new Promise((resolve) => {\n                    resolve({ winner, turns });\n                });\n\n                return result;\n            } \n\n            // If there's not a winner,\n            // call recursive function and wait for the result, then return it\n            \n            let result = await recurse();\n            return result;\n\n            function getAttack (game, playerTurn) {\n                return new Promise((resolve) => {\n                    // Set up commit button\n                    const commitButton = document.querySelector('#commit');\n                    // Dom.updateInfoBoxes(player.selected.x, player.selected.y);\n                    let player = game.players[playerTurn];\n\n                    commitButton.addEventListener('click', handleResolve);\n\n                    function handleResolve () {\n                        // Remove event listener to prevent duplicate calls\n                        commitButton.removeEventListener('click', handleResolve);\n\n                        // Check if input is valid\n                        if (checkValidInput(player.selected.x, player.selected.y)){\n\n                            // Attempt an attack\n                            let attempt = game.boards[1 - playerTurn].receiveAttack(player.selected.x, player.selected.y);\n                            \n                            // If the attack succeeds, resolve the return value\n                            if (attempt) {\n                                resolve({ x: player.selected.x, y: player.selected.y});\n                            \n                            // If the attack fails, resolve false\n                            } else {\n                                console.log('Invalid Placement');\n                                resolve(false);\n                            }\n                        } else {\n                            resolve(false);\n                        }\n                \n\n\n                        function checkValidInput (x, y) {\n                            if (x >= 0 && x < 10 && y >= 0 && y < 10) {\n                                return true;\n                            } else {\n                                console.log('out of range');\n                                return false;\n                            }\n                        }\n                    }\n                });\n            }\n\n            function recurse () {\n                return new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(takeTurns(aiTimer, game, winner, ++turns, player = 1 - player));\n                    }, aiTimer);;\n                });\n            } \n        };\n    }\n\n    function sleep ()\n     {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, 2000);\n        });\n    }\n\n    function findWhoseTurn (game = this) {\n        let result = false;\n        game.players.forEach((player) => {\n            if (player.isTurn){\n                result = player;\n            }\n        });\n        return result;\n    }\n\n    function findWhoseNextTurn (game = this) {\n        let result = false;\n        game.players.forEach((player, index) => {\n            if (player.isTurn) {\n                result = game.players[1 - index];\n            }\n        });\n        return result;\n    }\n\n    return {\n        players,\n        boards,\n        Ai,\n        testWinner,\n        mainLoop,\n        phase: 'placement',\n        findWhoseTurn,\n        findWhoseNextTurn\n    };\n}\n\nfunction testWinner () {\n    const boards = this.boards;\n\n    let winner = false;\n    boards.forEach((board, index) => {\n        if (board.shipsSunk() === 'ALL') {\n            winner = this.players[1 - index];\n        }\n    });\n    return winner;\n}\n\nexport {\n    initialize,\n};","// Entry Point\n\nimport css from './styles.css';\nimport * as Game from './game.js';\nimport * as Dom from './dom-manipulation.js'\n\n\n\nplayGame();\n\nasync function playGame () {\n\n    // Landing Screen\n    await Dom.landingScreen();\n\n    // Choose players\n    const players = await Dom.playerChoiceScreen();\n    console.log(players);\n\n    // Initialize Game \n    players[0].type = 'ai';\n    players[1].type = 'ai';\n    let newGame = Game.initialize(players[0], players[1]);\n    Dom.initialize();\n\n    // Loop\n    newGame.mainLoop();\n\n}\n\nexport {\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","randomCoords","board","length","x","Math","floor","random","y","createShip","name","totalHits","hit","this","isSunk","placeShip","orientation","checkIfValid","Error","checkIfRoom","commitPlacement","gameboardObj","newShip","Ship","ships","push","i","ship","attacked","receiveAttack","node","isInBounds","shipsSunk","sunkShipCount","forEach","index","populate","shipsList","keepGoing","randomOrientation","grid","initialize","boards","document","querySelectorAll","letters","newDiv","createElement","classList","add","style","backgroundColor","gridArea","appendChild","addEmpty","innerText","renderLetters","gridColumn","gridRow","renderNumbers","j","className","meta","renderNodeSquares","updateBoards","game","players","playerWhoseTurn","findWhoseTurn","arrow","show","phase","disabled","rotateButton","querySelector","display","targetingButton","type","boardNameplate","renderedBoard","player","square","findNode","preview","remove","slice","color","isTurn","selected","renderOwnMeta","showOrHideBoard","renderTheirMeta","found","row","yIndex","xIndex","showIfTurn","contains","showMyShips","showTargeting","getPreview","ownRenderedBoard","placing","findRenderedSquare","result","landingScreen","addLandingModal","message","newModal","newP","fontSize","body","Promise","resolve","setTimeout","clearModal","playerChoiceScreen","addChoiceModal","modal","createPlayerInputBox","button","playerNumber","playerP","inputDiv","input","setAttribute","id","label","insertBefore","selectDiv","select","option","readyButton","addEventListener","handleReadyClick","removeEventListener","splashscreen","mode","setupPlayerTransition","addModal","removeModal","infoP","cssText","winnerScreen","winner","turns","p","playAgain","window","location","reload","innerHTML","player1","player2","h","populateBoard","playerTypes","playerPlaceLoop","setupListeners","toggleTurns","playRound","takeTurns","getAttack","recurse","aiTimer","playerTurn","commitButton","handleResolve","console","log","checkValidInput","Dom","attackRandom","coordinates","sleep","testWinner","handleDisplayClick","event","srcElement","handleArrowClick","moveSelection","xChange","yChange","playerIndex","waitForInput","handleCommit","handleRotate","Ai","newPlayer","attack","Player","mainLoop","findWhoseNextTurn","newGame","Game","playGame"],"sourceRoot":""}