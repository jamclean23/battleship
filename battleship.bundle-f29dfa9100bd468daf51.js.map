{"version":3,"file":"battleship/battleship.bundle-f29dfa9100bd468daf51.js","mappings":"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","sources":["webpack://webpack/webpack/bootstrap","webpack://webpack/webpack/runtime/define property getters","webpack://webpack/webpack/runtime/hasOwnProperty shorthand","webpack://webpack/webpack/runtime/make namespace object","webpack://webpack/./src/battleship/player.js","webpack://webpack/./src/battleship/ship.js","webpack://webpack/./src/battleship/gameboard.js","webpack://webpack/./src/battleship/ai.js","webpack://webpack/./src/battleship/dom-manipulation.js","webpack://webpack/./src/battleship/game.js","webpack://webpack/./src/battleship/battleship.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Functions for creation and management of player objects\n\nfunction createPlayer (type = 'player') {\n\n    if (!(type === 'ai')) type = 'player';\n\n    let board;\n\n    function attack (board, x, y) {\n        return board.receiveAttack(x, y);\n    }\n\n    function attackRandom(board) {\n        let attack;\n        while (!attack) {\n            let grid = randomCoords(board);\n            attack = board.receiveAttack(grid.x, grid.y);\n        }\n    }\n\n    if (type === 'player') {\n        return {\n            isTurn: false,\n            type,\n            board,\n            attack,\n            name: 'Player',\n            selected: {\n                x: 0,\n                y: 0\n            },\n            placing: {\n                ship: false,\n                orientation: 'horizontal'\n\n            },\n            show: 'myShips'\n        }  \n    } else if (type === 'ai') {\n        return {\n            isTurn: false,\n            type,\n            board,  \n            attackRandom,\n            name: 'Ai'  \n        }\n    }\n}\n\nfunction randomOrientation () {\n    let integer = Math.floor(Math.random() * 10);\n    if (integer > 5) {\n        return 'horizontal';\n    } else {\n        return 'vertical';\n    }\n}\n\nfunction randomCoords (board) {\n    let length = board.board.length;\n    let x = Math.floor(Math.random() * length);\n    let y = Math.floor(Math.random() * length);\n\n    return {\n        x,\n        y\n    }\n}\n\nexport {\n    createPlayer\n}","// Functions for creation and management of ship objects\n\nfunction createShip (length, name) {\n\n    let totalHits = 0;\n\n    function hit () {\n        this.totalHits++;\n    }\n    \n    function isSunk () {\n        if (this.totalHits >= this.length) {\n            return true;\n        }\n        return false;\n    }\n\n    return {\n        length,\n        totalHits,\n        hit,\n        isSunk,\n        name\n    }\n}\n\nexport {\n    createShip,\n}","// Function for creation and management of gameboard objects\n\nimport * as Ship from './ship.js';\n\nfunction createBoard () {\n\n    let board = populateBoard();\n\n    let shipsList = [\n        {\n            name: 'Carrier',\n            length: 5\n        },\n        {\n            name: 'Battleship',\n            length: 4\n        },\n        {\n            name: 'Destroyer',\n            length: 3\n        },\n        {\n            name: 'Submarine',\n            length: 3\n        },\n        {\n            name: 'Patrol Boat',\n            length: 2\n        }\n    ];\n\n    function populateBoard () {\n        let board = [];\n\n        for (let i = 0; i < 10; i ++) {\n            let row = [];\n            for (let h = 0; h < 10; h++) {\n                row.push(createNode());\n            }\n            board.push(row);\n        }\n        return board;\n    }\n\n    function createNode () {\n        return {\n            ship: false,\n            attacked: false,\n        };\n    }\n\n    return {\n        board,\n        receiveAttack,\n        placeShip,\n        shipsSunk,\n        ships: [],\n        shipsList\n    };\n}\n\nfunction placeShip (x, y, length, orientation = 'horizontal', name) {\n    // Check if the current node is valid\n    if (checkIfValid(x, y, this.board)){\n        // Check if orientation has been specified\n        if (orientation === 'horizontal' || orientation === 'vertical') {\n            // Check that there is room for the placement\n            if (checkIfRoom(x, y, length, orientation, this.board)) {\n                commitPlacement(x, y, length, orientation, this.board, this, name);\n                return 'valid';\n            }\n        } else {\n            throw new Error('Orientation not specified');\n        }   \n    }\n\n    return \"invalid\"\n\n    function commitPlacement (x, y, length, orientation, board, gameboardObj, name) {\n\n        const newShip = Ship.createShip(length, name);\n        gameboardObj.ships.push(newShip);        \n\n        for (let i = 0; i < length; i++) {\n            board[y][x].ship = newShip;\n            if (orientation === 'horizontal') x++;\n            if (orientation === 'vertical') y++;\n        }\n    }\n\n    function checkIfRoom (x, y, length, orientation, board) {\n        for (let i = 0; i < length; i ++) {\n            if (!(checkIfValid(x, y, board))) {\n                return false;\n            };\n\n            if (orientation === 'horizontal') {\n                x++;\n            } else {\n                y++;\n            }\n        }\n        return true;\n    }\n\n    function checkIfValid (x, y, board) {\n        if (y < 0 || y > 9) return false;\n        if (x < 0 || x > 9 ) return false;\n        if (board[y][x].ship || board[y][x].attacked) return false;\n        return true;\n    }\n\n}\n\nfunction receiveAttack (x, y) {\n    let node = this.board[y][x];\n\n    if (!isInBounds(x, y) || node.attacked) return false;\n\n    node.attacked = true;\n\n    if (node.ship){\n        node.ship.totalHits++;\n        return 'hit';\n    } else {\n        return 'miss';\n    }\n}\n\nfunction shipsSunk () {\n    let sunkShipCount = 0;\n    let ships = this.ships;\n    ships.forEach((ship, index) => {\n        if (ship.isSunk()) sunkShipCount++;\n    });\n    if (ships.length === sunkShipCount && ships.length > 0) return 'ALL';\n    return sunkShipCount;\n\n}\n\nfunction isInBounds (x, y) {\n    if (x < 0 || x > 9 || y < 0 || y > 9) return false;\n    return true;\n}\n\nexport {\n    createBoard\n}","// Functions relating to ai and randomization\n\nfunction populate (board) {\n    board.shipsList.forEach((ship, index) => {\n        let keepGoing = 'invalid';\n        while (keepGoing === 'invalid') {\n            let orientation = randomOrientation();\n            let grid = randomCoords(board);\n            keepGoing = board.placeShip(grid.x, grid.y, ship.length, orientation, ship.name);\n        }\n    });\n\n}\n\nfunction randomOrientation () {\n    let integer = Math.floor(Math.random() * 10);\n    if (integer > 5) {\n        return 'horizontal';\n    } else {\n        return 'vertical';\n    }\n}\n\nfunction randomCoords (board) {\n    let length = board.board.length;\n    let x = Math.floor(Math.random() * length);\n    let y = Math.floor(Math.random() * length);\n\n    return {\n        x,\n        y\n    }\n}\n\nexport {\n    populate,\n}","// Dom methods and rendering\n\nfunction initialize () {\n    // Render guides for each board\n    const boards = document.querySelectorAll('.board');\n    const letters = [\n        'A', 'B', 'C', 'D', 'E', 'F',\n        'G', 'H', 'I', 'J'\n    ];\n\n    boards.forEach((board) => {\n        addEmpty(board);\n        renderLetters(board);\n        renderNumbers(board);\n        renderNodeSquares(board);\n    });\n\n    function addEmpty (board) {\n        // Create empty square and give it a class\n        let newDiv = document.createElement('div');\n        newDiv.classList.add('empty');\n        newDiv.classList.add('gridSquare');\n        \n        // Placement\n        newDiv.style.backgroundColor = 'black';\n        newDiv.style.gridArea = '0/0/1/1';\n        \n        // Add to DOM\n        board.appendChild(newDiv);\n    }\n\n    function renderLetters (board) {\n\n        // Generate ten divs\n        for (let i = 0; i < 10; i++) {\n            let newDiv = document.createElement('div');\n\n            // Assign a letter to each of them in order\n            newDiv.innerText = letters[i];\n            \n            // Give them a class\n            newDiv.classList.add('letter');\n            newDiv.classList.add('gridSquare');\n\n\n            // Placement\n            newDiv.style.gridArea = '0/' + i + '/1/' + (i + 1);\n\n            // Add to DOM\n            board.appendChild(newDiv);\n        }\n    }\n\n    function renderNumbers (board) {\n        // Generate ten divs\n        for (let i = 0; i < 10; i++) {\n            let newDiv = document.createElement('div');\n\n            // Assign a number to each in order\n            newDiv.innerText = i + 1;\n\n            // Give them a class\n            newDiv.classList.add('number');\n            newDiv.classList.add('gridSquare');\n\n            // Placement\n            newDiv.style.gridColumn = '0 / 1';\n            newDiv.style.gridRow = (i + 2) + '/' + (i + 3);\n\n            // Add to DOM\n            board.appendChild(newDiv);\n        }\n    }\n\n    function renderNodeSquares(board) {\n        // create 100 divs, separated by ten to place them in rows\n        for (let i = 0; i < 10; i++) {\n            for (let j = 0; j < 10; j++) {\n                let newDiv = document.createElement('div');\n\n                // Give it a class\n                newDiv.className = 'gridSquare gameSquare';\n\n                // Attach metadata about positoning\n                newDiv.meta = {\n                    x: j,\n                    y: i\n                }\n\n                // Placement\n                newDiv.style.gridColumn = (newDiv.meta.x + 2) + ' / ' +  (newDiv.meta.x + 3);\n                newDiv.style.gridRow = (newDiv.meta.y + 2) + ' / ' +  (newDiv.meta.y + 3);\n\n                board.appendChild(newDiv);\n            }\n        }\n    }\n}\n\nfunction updateBoards (game) {\n\n    let boards = game.boards;\n    let players = game.players;\n    let playerWhoseTurn = game.findWhoseTurn(game);\n\n    // Disable arrows and commit while in fleet view\n    const arrows = document.querySelectorAll('.arrow');\n    arrows.forEach((arrow, index) => {\n        if (playerWhoseTurn.show === 'myShips' && game.phase != 'placement') {\n            arrow.disabled = true;\n        } else {\n            arrow.disabled = false;\n        }\n    });\n\n    // Hide the rotate button after placement phase\n    const rotateButton = document.querySelector('#rotate');\n    if (game.phase != 'placement') rotateButton.style.display = 'none';\n\n    // Hide the radar button during placement phase\n    const targetingButton = document.querySelector('#targeting');\n    if (game.phase === 'placement') {\n        targetingButton.style.display = 'none';\n    } else {\n        targetingButton.style.display = 'grid';\n    }\n\n    // If it's the ai's turn, do not render\n    if (playerWhoseTurn.type === 'ai') return;\n\n    // Get DOM board nameplate\n    const boardNameplate = document.querySelector('#boardIdent');\n    // Update board nameplate\n    if (playerWhoseTurn.show === 'myShips') {\n        boardNameplate.innerText = 'My Fleet';\n    } else {\n        boardNameplate.innerText = 'Radar';\n    }\n    \n\n    // Get DOM player nameplate\n    const playerNameplate = document.querySelector('#playerIdent');\n    // Update player nameplate\n    playerNameplate.innerText = playerWhoseTurn.name;\n\n    // Get player's own boards from the DOM\n    const ownRenderedBoards = document.querySelectorAll('.board.own');\n\n    // Iterate through 'own' boards\n    ownRenderedBoards.forEach((renderedBoard, index) => {\n        // Assign an owner to each board\n        renderedBoard.player = players[index];\n\n        // Hide the board if it's an ai\n        if (renderedBoard.player.type === 'ai' && game.players[1 - index].type === 'player') {\n            renderedBoard.style.display = 'none';\n        }\n\n        // Get nodelist of all squares on the boards\n        const nodeSquares = renderedBoard.querySelectorAll('.gameSquare');\n\n        // Iterate though them\n        nodeSquares.forEach((square) => {\n            // Assign node to the square's meta\n            square.meta.square = findNode(square.meta.x, square.meta.y, boards[index]);\n\n            // Render meta\n            renderOwnMeta(game, renderedBoard, square);     \n        });\n\n        // Decide whether or not to display the board\n        showOrHideBoard(renderedBoard);\n    });\n\n    // Get players' 'their' boards from the Dom\n    const theirRenderedBoards = document.querySelectorAll('.board.theirs');\n\n    // Iterate through boards\n    theirRenderedBoards.forEach((renderedBoard, index) => {\n        // Assign an owner to each board\n        renderedBoard.player = players[index];\n\n        // Hide the board if it's an ai\n        if (renderedBoard.player.type === 'ai' && game.players[1 - index].type === 'player') {\n            renderedBoard.style.display = 'none';\n        }\n\n        // Get a nodelist of all the squares on the board\n        const nodeSquares = renderedBoard.querySelectorAll('.gameSquare');\n\n        // Iterate through them\n        nodeSquares.forEach((square) => {\n\n            // Assign a node to the square's meta\n            square.meta.square = findNode(square.meta.x, square.meta.y, boards[1 - index]);\n\n            // Render meta\n            renderTheirMeta(game, renderedBoard, square);\n        });\n\n        // Decide whether or not to display the board\n        showOrHideBoard(renderedBoard);\n    });\n\n}\n\nfunction renderTheirMeta (game, renderedBoard, square) {\n    const ship = square.meta.square.ship;\n\n    if (ship && square.meta.square.attacked) {\n        square.style.backgroundColor = 'red';\n        square.innerText = ship.name.slice(0, 1); \n        square.style.color = 'white';\n    }\n\n    if (!ship && square.meta.square.attacked) {\n        square.style.backgroundColor = 'blue';\n    }\n\n    if (renderedBoard.player.isTurn && renderedBoard.player.selected) {\n        if (game.phase === 'game' && square.meta.x === renderedBoard.player.selected.x && square.meta.y === renderedBoard.player.selected.y) {\n            square.classList.add('selected');\n        } else {\n            square.classList.remove('selected');\n        }\n    }\n}\n\nfunction renderOwnMeta (game, renderedBoard, square) {\n    const ship = square.meta.square.ship;\n\n    if (square.meta.preview) {\n        square.classList.add('preview');\n    } else {\n        square.classList.remove('preview');\n    }\n    \n    if (ship) {\n        square.innerText = ship.name.slice(0, 1); \n        square.style.backgroundColor = 'gray';\n        square.style.color = 'white';\n    } \n\n    if (ship && square.meta.square.attacked) {\n        square.style.backgroundColor = 'red';\n    }\n\n    if (!ship && square.meta.square.attacked) {\n        square.style.backgroundColor = 'blue';\n    }\n\n    if (renderedBoard.player.isTurn && renderedBoard.player.selected) {\n        if (game.phase === 'placement' && square.meta.x === renderedBoard.player.selected.x && square.meta.y === renderedBoard.player.selected.y) {\n            square.classList.add('selected');\n        } else {\n            square.classList.remove('selected');\n        }\n    } else {\n        square.classList.remove('selected');\n    }\n}\n\nfunction findNode (x, y, board) {\n    // Search for the node\n    let found = false;\n    board.board.forEach((row, yIndex) => {\n        row.forEach((square, xIndex) => {\n            if (xIndex === +x && yIndex === +y) found = square;\n        });\n    });\n\n    // If it's found then return it\n    if (found) return found;\n\n    // If it isn't then throw an error\n    throw new Error('Node Square mismatch');\n    \n}\n\nfunction showOrHideBoard (board) {\n    \n    showIfTurn(board);\n    if (board.player.show === 'myShips') showMyShips(board);\n    if (board.player.show === 'targeting') showTargeting(board);\n\n    function showMyShips (board) {\n        if (!board.classList.contains('own')) {\n            board.style.display = 'none';\n        } \n    }\n    \n    function showTargeting (board) {\n        if (!board.classList.contains('theirs')) {\n            board.style.display = 'none';\n        } \n    }\n    \n    function showIfTurn (board) {\n        if (board.player.isTurn) {\n            board.style.display = 'grid';\n        } else {\n            board.style.display = 'none';\n        }\n    }\n}\n\nfunction getPreview (game) {\n    // Calculate which squares should be used for the preview\n\n    // Player whose turn it is\n    let player = game.findWhoseTurn(game);\n\n    // Get own rendered board for the player\n    const ownRenderedBoards = document.querySelectorAll('.board.own');\n\n    let ownRenderedBoard;\n    ownRenderedBoards.forEach((renderedBoard) => {\n        if (renderedBoard.player === player) {\n            ownRenderedBoard = renderedBoard;\n        }\n    });\n\n    // Get preview squares and assign\n    for (let i = 1; i < player.placing.ship.length; i++) {\n        if (player.placing.orientation === 'horizontal') {\n            let square = findRenderedSquare(player.selected.x + i, player.selected.y, ownRenderedBoard);\n            if (square) square.classList.add('preview');\n            \n        } else if (player.placing.orientation === 'vertical') {\n            let square = findRenderedSquare(player.selected.x, player.selected.y + i, ownRenderedBoard);\n            if (square) square.classList.add('preview');\n        }\n    }\n\n    function findRenderedSquare (x, y, renderedBoard) {\n        const squares = renderedBoard.querySelectorAll('.gameSquare');\n        let result;\n        squares.forEach((square) => {\n            if (square.meta.x === x && square.meta.y === y) {\n                result = square;\n            }\n        });\n        if (result) return result;\n        return false;\n    }\n}\n\nfunction splashscreen (game) {\n    return new Promise((resolve) => {\n        console.log('splashing');\n\n        // Overlay the screen with a modal\n        addModal(game);\n        // Get the ready button\n        const readyButton = document.querySelector('.modal .readyButton');\n        // Add eventlistener\n        readyButton.addEventListener('click', handleReadyClick);\n\n        function handleReadyClick () {\n            readyButton.removeEventListener('click', handleReadyClick);\n            removeModal();\n            resolve();\n        }\n    });\n\n    function addModal (game) {\n        // Create new modal\n        let newModal = document.createElement('div');\n\n        // Set css styling/class\n        newModal.classList.add('modal');\n\n        // Add to the dom\n        document.querySelector('body').appendChild(newModal);\n\n        // Add content\n        setupPlayerTransition(newModal, game);\n\n        function setupPlayerTransition (modal, game) {\n            \n            // Add info paragraph\n            let infoP = document.createElement('p');\n\n            // Add inner text\n            console.log(game);\n            infoP.innerText = game.findWhoseTurn().name + ' is next';\n\n            // set css styling/class\n            infoP.classList.add('modalMessage');\n\n            // Add to modal\n            modal.appendChild(infoP);\n\n\n            // make a ready button\n            let readyButton = document.createElement('button');\n\n            // Add inner text\n            readyButton.innerText = 'Ready!';\n\n            // Set css styling/class\n            readyButton.classList.add('readyButton');\n            readyButton.style.cssText = \"font-size: 3vh\";\n\n            // Add to modal\n            modal.appendChild(readyButton); \n        }\n    }\n\n    function removeModal () {\n        // Get the modal\n        const modal = document.querySelector('.modal');\n        // Remove it\n        modal.remove();\n    }\n}\n\nexport {\n    initialize,\n    updateBoards,\n    getPreview,\n    splashscreen\n}","import * as Player from './player.js';\nimport * as Gameboard from './gameboard.js';\nimport * as Ai from './ai.js';\nimport * as Dom from './dom-manipulation.js';\n\n\nfunction initialize (player1 = 'player', player2 = 'player') {\n\n    // Initialize game boards\n    const boards = [];\n\n    for (let i = 0; i < 2; i++) {\n        boards[i] = Gameboard.createBoard();\n    }\n\n    // Initialize players\n    const playerTypes = [player1, player2];\n    const players = [];\n\n    playerTypes.forEach((player, index) => {\n        let newPlayer = Player.createPlayer(player);\n        newPlayer.board = boards[index];\n        players.push(newPlayer);\n    });\n\n    // Main game loop\n    async function mainLoop () {\n        // SETUP\n        \n        // Give player 1 the starting turn\n        this.players[0].isTurn = true;\n\n        // Initialize arrow keys\n        setupListeners(this);\n\n        // Name players\n        this.players.forEach((player, index) => {\n            player.name = player.name + ' #' + (index + 1);\n        });\n        \n        \n        // Populate game boards\n        console.log('Placement Phase');\n        // Determine player type and appropriate placement method\n        for (let i = 0; i < this.boards.length; i++) {\n            // Draw boards\n            Dom.updateBoards(this);\n\n            if (this.players[i].type === 'ai') {\n                this.Ai.populate(this.boards[i]);\n            } else if (this.players[i].type === 'player') {\n                await playerPlaceLoop(this, this.boards[i], i);\n                players[i].show = 'myShips';\n            }\n            toggleTurns(this);\n        }\n        \n        // Draw boards\n        Dom.updateBoards(this);\n        \n        // Game loop\n        console.log('Game Phase');\n        this.phase = 'game';\n        playRound(this, 0);\n\n        async function playerPlaceLoop (game, board, playerIndex) {\n\n            // Iterate through ships list, continuing once placement is valid\n            for (let i = 0; i < board.shipsList.length; i++) {\n                let player = game.players[playerIndex];\n                player.placing.ship = board.shipsList[i];\n                player.placing.orientation = 'horizontal';\n\n                // Initialize preview\n                Dom.getPreview(game);\n\n                let result = 'invalid';\n\n                while (result != 'valid') {\n\n                    result = await waitForInput(board, i, player.placing.orientation);\n\n                    if (result === 'horizontal' || result === 'vertical') {\n                        player.placing.orientation = result;\n                    }\n                    Dom.updateBoards(game);\n                    Dom.getPreview(game);\n                }\n            }\n\n            // Return after finished\n            return new Promise((resolve) => {\n                resolve();\n            });\n\n            function waitForInput (board, i, orientation) {\n                return new Promise((resolve) => {\n                    // Setup commit button\n                    const commitButton = document.querySelector('#commit');\n\n                    // Wait for user input, check for valid selection, and either resolve or continue loop\n                    commitButton.addEventListener('click', handleCommit);\n\n                    // Setup rotate button\n                    const rotateButton = document.querySelector('#rotate');\n                    \n                    // wait for user input, rotate ship and continue loop \n                    rotateButton.addEventListener('click', handleRotate);\n\n                    function handleCommit () {\n                        commitButton.removeEventListener('click', handleCommit);\n                        commitButton.removeEventListener('click', handleCommit);\n                        let result = board.placeShip(game.players[playerIndex].selected.x, game.players[playerIndex].selected.y, board.shipsList[i].length, orientation, board.shipsList[i].name);\n                        resolve(result);\n                    }\n\n                    function handleRotate () {\n                        commitButton.removeEventListener('click', handleCommit);\n                        rotateButton.removeEventListener('click', handleRotate);\n                        orientation === 'horizontal'? orientation = 'vertical': orientation = 'horizontal';\n\n                        resolve(orientation);\n                    }\n                });\n            }\n        }\n\n        function setupListeners (game) {\n            // Get a nodelist of display buttons\n            const displayButtons = document.querySelectorAll('.displayButton');\n\n            // Iterate through them\n            displayButtons.forEach((button) => {\n                button.addEventListener('click', handleDisplayClick);\n            });\n\n            function handleDisplayClick (event) {\n\n                const key = event.srcElement.id;\n                const player = findWhoseTurn(game);\n\n                switch(key) {\n                    case 'myShips':\n                        player.show = 'myShips';\n                        break;\n                    case 'targeting':\n                        player.show = 'targeting';\n                        break;\n                }\n\n                Dom.updateBoards(game);\n                if (game.phase === 'placement') Dom.getPreview(game);\n\n            }\n\n            // Get a nodelist of the buttons on the arrow pad\n            const arrows = document.querySelectorAll('.arrow');\n    \n            // Iterate through them\n            arrows.forEach((button) => {\n                button.addEventListener('click', handleArrowClick);\n            });\n\n            function handleArrowClick (event) {\n\n                let key = event.srcElement.id;\n                let player = findWhoseTurn(game);\n                if(player.type === 'ai') return;\n\n                if (!player) throw new Error('Game not started');\n                switch(key) {\n                    case 'up':\n                        player.selected = moveSelection(player.selected, 0, -1);\n                        break;\n                    case 'down':\n                        player.selected = moveSelection(player.selected, 0, 1);\n                        break;\n                    case 'left':\n                        player.selected = moveSelection(player.selected, -1, 0);\n                        break;\n                    case 'right':\n                        player.selected = moveSelection(player.selected, 1, 0);\n                        break\n                    case 'commit':\n                        break\n                }\n\n                Dom.updateBoards(game);\n                if (game.phase === 'placement') Dom.getPreview(game);\n\n                \n                function moveSelection (selected, xChange, yChange) {\n                    selected.x = selected.x + xChange;\n                    selected.y = selected.y + yChange;\n\n                    if (selected.x > 9) selected.x = 9;\n                    if (selected.x < 0) selected.x = 0;\n\n                    if (selected.y > 9) selected.y = 9;\n                    if (selected.y < 0) selected.y = 0;\n\n                    return selected;\n                }\n\n\n            }\n\n        }\n\n        function toggleTurns (game) {\n            game.players.forEach((player) => {\n                player.isTurn ? player.isTurn = false: player.isTurn = true ;\n            });\n        }\n\n        async function playRound (game, aiTimer) {\n            let result = await takeTurns(aiTimer, game);\n            console.log(result.winner.name + ' has won in ' + result.turns + ' turns!');\n        }\n\n        async function takeTurns (aiTimer = 0, game, winner = false, turns = 0, player = 0) {\n            console.log(aiTimer);\n            // Initial render\n            Dom.updateBoards(game);\n\n            // Splash Screen\n            await Dom.splashscreen(game);\n\n            // log progress for testing\n            console.log('player turn: ' + (player + 1));\n\n            // Ai players make random attacks on the other player's board\n            if (game.players[player].type === 'ai') {\n                game.players[player].attackRandom(game.boards[1 - player]);\n            // Wait for input if it's a human player\n            } else if (game.players[player].type === 'player') {\n                // Show my fleet screen on start of turn\n                game.findWhoseTurn(game).show = 'myShips';\n                Dom.updateBoards(game);\n\n                // Wait for user input and make attack\n                let coordinates = false;\n\n                while (!coordinates) {\n                    coordinates = await getAttack(game, player);\n                }\n\n\n            }\n\n            // Render boards\n            Dom.updateBoards(game);\n\n            // Check for winner and return\n            winner = game.testWinner();\n\n            // Toggle player turns\n            toggleTurns(game);\n\n            if (winner){\n                let result = new Promise((resolve) => {\n                    resolve({ winner, turns });\n                });\n\n                return result;\n            } \n\n            // If there's not a winner,\n            // call recursive function and wait for the result, then return it\n            \n            let result = await recurse();\n            return result;\n\n            function getAttack (game, playerTurn) {\n                return new Promise((resolve) => {\n                    // Set up commit button\n                    const commitButton = document.querySelector('#commit');\n                    // Dom.updateInfoBoxes(player.selected.x, player.selected.y);\n                    let player = game.players[playerTurn];\n\n                    commitButton.addEventListener('click', handleResolve);\n\n                    function handleResolve () {\n                        // Remove event listener to prevent duplicate calls\n                        commitButton.removeEventListener('click', handleResolve);\n\n                        // Check if input is valid\n                        if (checkValidInput(player.selected.x, player.selected.y)){\n\n                            // Attempt an attack\n                            let attempt = game.boards[1 - playerTurn].receiveAttack(player.selected.x, player.selected.y);\n                            \n                            // If the attack succeeds, resolve the return value\n                            if (attempt) {\n                                resolve({ x: player.selected.x, y: player.selected.y});\n                            \n                            // If the attack fails, resolve false\n                            } else {\n                                console.log('Invalid Placement');\n                                resolve(false);\n                            }\n                        } else {\n                            resolve(false);\n                        }\n                \n\n\n                        function checkValidInput (x, y) {\n                            if (x >= 0 && x < 10 && y >= 0 && y < 10) {\n                                return true;\n                            } else {\n                                console.log('out of range');\n                                return false;\n                            }\n                        }\n                    }\n                });\n            }\n\n            function recurse () {\n                return new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(takeTurns(aiTimer, game, winner, ++turns, player = 1 - player));\n                    }, aiTimer);;\n                });\n            } \n        };\n    }\n\n    function findWhoseTurn (game) {\n        if (!game) game = this;\n        let result = false;\n        game.players.forEach((player) => {\n            if (player.isTurn){\n                result = player;\n            }\n        });\n        return result;\n    }\n\n    return {\n        players,\n        boards,\n        Ai,\n        testWinner,\n        mainLoop,\n        phase: 'placement',\n        findWhoseTurn\n    };\n}\n\nfunction testWinner () {\n    const boards = this.boards;\n\n    let winner = false;\n    boards.forEach((board, index) => {\n        if (board.shipsSunk() === 'ALL') {\n            winner = this.players[1 - index];\n        }\n    });\n    return winner;\n}\n\nexport {\n    initialize,\n};","// Entry Point\n\nimport css from './styles.css';\nimport * as Game from './game.js';\nimport * as Dom from './dom-manipulation.js'\n\n\n\n// Landing Screen\n\n// Choose players\n\n// Initialize Game \nlet newGame = Game.initialize('player', 'ai');\nDom.initialize();\n\n// Loop\nnewGame.mainLoop();\n\n\nexport {\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","createPlayer","board","type","attack","x","y","receiveAttack","attackRandom","grid","randomCoords","isTurn","name","selected","placing","ship","orientation","show","length","Math","floor","random","createShip","totalHits","hit","this","isSunk","createBoard","i","row","h","push","attacked","populateBoard","placeShip","shipsSunk","ships","shipsList","checkIfValid","Error","checkIfRoom","commitPlacement","gameboardObj","newShip","Ship","node","isInBounds","sunkShipCount","forEach","index","populate","keepGoing","randomOrientation","updateBoards","game","boards","players","playerWhoseTurn","findWhoseTurn","document","querySelectorAll","arrow","phase","disabled","rotateButton","querySelector","style","display","targetingButton","boardNameplate","innerText","renderedBoard","player","square","meta","findNode","preview","classList","add","remove","slice","backgroundColor","color","renderOwnMeta","showOrHideBoard","renderTheirMeta","found","yIndex","xIndex","showIfTurn","contains","showMyShips","showTargeting","getPreview","ownRenderedBoard","findRenderedSquare","result","splashscreen","Promise","resolve","console","log","newModal","createElement","setupPlayerTransition","modal","infoP","appendChild","readyButton","cssText","addModal","addEventListener","handleReadyClick","removeEventListener","testWinner","winner","letters","newGame","player1","player2","Gameboard","playerTypes","mainLoop","playerPlaceLoop","setupListeners","toggleTurns","playRound","takeTurns","getAttack","recurse","setTimeout","aiTimer","turns","playerTurn","commitButton","handleResolve","checkValidInput","Dom","coordinates","handleDisplayClick","event","srcElement","id","handleArrowClick","moveSelection","xChange","yChange","button","playerIndex","waitForInput","handleCommit","handleRotate","Ai","newPlayer","Player","Game","newDiv","gridArea","addEmpty","renderLetters","gridColumn","gridRow","renderNumbers","j","className","renderNodeSquares"],"sourceRoot":""}